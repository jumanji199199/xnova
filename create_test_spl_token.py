#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ SPL —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
"""

import sys
import os
import asyncio
from dotenv import load_dotenv
from solders.keypair import Keypair
from solders.pubkey import Pubkey
from solana.rpc.async_api import AsyncClient
from solana.rpc.types import TxOpts
from spl.token.async_client import AsyncToken
from spl.token.constants import TOKEN_PROGRAM_ID
from spl.token.instructions import (
    initialize_mint, InitializeMintParams,
    create_associated_token_account,
    mint_to, MintToParams,
    get_associated_token_address
)
from solana.transaction import Transaction

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
if sys.platform == "win32":
    import codecs
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())

class TestSPLTokenCreator:
    """–°–æ–∑–¥–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ SPL —Ç–æ–∫–µ–Ω–∞"""
    
    def __init__(self):
        load_dotenv()
        self.setup_config()
        
    def setup_config(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # RPC URL —Å API –∫–ª—é—á–æ–º
        self.rpc_url = os.getenv("SOLANA_RPC_URL", "https://api.mainnet.solana.com")
        print(f"[RPC] –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint: {self.rpc_url}")
        
        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫–æ—à–µ–ª—å–∫–∞
        privkey_hex = os.getenv("SOLANA_PRIVKEY")
        if not privkey_hex:
            raise ValueError("[ERROR] SOLANA_PRIVKEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
        try:
            privkey_bytes = bytes.fromhex(privkey_hex)
            self.payer_keypair = Keypair.from_bytes(privkey_bytes)
        except Exception as e:
            raise ValueError(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: {e}")
        
        print(f"[WALLET] –ö–æ—à–µ–ª–µ–∫: {self.payer_keypair.pubkey()}")
        
    async def create_test_token(self) -> dict:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π SPL —Ç–æ–∫–µ–Ω"""
        print(f"\nü™ô [CREATE] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ SPL —Ç–æ–∫–µ–Ω–∞...")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RPC
            client = AsyncClient(self.rpc_url)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
            balance_resp = await client.get_balance(self.payer_keypair.pubkey())
            balance_sol = balance_resp.value / 1e9
            print(f"[BALANCE] –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {balance_sol:.9f} SOL")
            
            if balance_sol < 0.01:
                print(f"‚ùå [ERROR] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 0.01 SOL)")
                return {"success": False, "error": "Insufficient balance"}
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π keypair –¥–ª—è mint (–∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞)
            mint_keypair = Keypair()
            print(f"[MINT] Mint address: {mint_keypair.pubkey()}")
            
            # –°–æ–∑–¥–∞–µ–º mint account
            print(f"[STEP 1] –°–æ–∑–¥–∞–Ω–∏–µ mint account...")
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º account –¥–ª—è mint
            from solders.system_program import create_account, CreateAccountParams
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è rent-exempt mint account
            mint_size = 82  # —Ä–∞–∑–º–µ—Ä mint account –≤ –±–∞–π—Ç–∞—Ö
            rent_response = await client.get_minimum_balance_for_rent_exemption(mint_size)
            rent_lamports = rent_response.value
            
            create_account_ix = create_account(
                CreateAccountParams(
                    from_pubkey=self.payer_keypair.pubkey(),
                    to_pubkey=mint_keypair.pubkey(),  # üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: to_pubkey –≤–º–µ—Å—Ç–æ new_account_pubkey
                    lamports=rent_lamports,
                    space=mint_size,
                    owner=TOKEN_PROGRAM_ID  # üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: owner –≤–º–µ—Å—Ç–æ program_id
                )
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º mint
            initialize_mint_ix = initialize_mint(
                InitializeMintParams(
                    program_id=TOKEN_PROGRAM_ID,
                    mint=mint_keypair.pubkey(),
                    decimals=6,  # 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π (–∫–∞–∫ —É USDC)
                    mint_authority=self.payer_keypair.pubkey(),
                    freeze_authority=self.payer_keypair.pubkey()
                )
            )
            
            # –ü–æ–ª—É—á–∞–µ–º associated token account address
            token_account = get_associated_token_address(
                self.payer_keypair.pubkey(),
                mint_keypair.pubkey()
            )
            print(f"[TOKEN_ACCOUNT] Token account: {token_account}")
            
            # –°–æ–∑–¥–∞–µ–º associated token account
            print(f"[STEP 2] –°–æ–∑–¥–∞–Ω–∏–µ token account...")
            create_token_account_ix = create_associated_token_account(
                payer=self.payer_keypair.pubkey(),
                owner=self.payer_keypair.pubkey(),
                mint=mint_keypair.pubkey()
            )
            
            # –ú–∏–Ω—Ç–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã (1000 —Ç–æ–∫–µ–Ω–æ–≤ = 1000 * 10^6 = 1,000,000,000 raw units)
            test_amount = 1000 * (10 ** 6)  # 1000 —Ç–æ–∫–µ–Ω–æ–≤ —Å 6 decimals
            print(f"[STEP 3] –ú–∏–Ω—Ç–∏–Ω–≥ {test_amount / (10**6)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤...")
            mint_to_ix = mint_to(
                MintToParams(
                    program_id=TOKEN_PROGRAM_ID,
                    mint=mint_keypair.pubkey(),
                    dest=token_account,
                    mint_authority=self.payer_keypair.pubkey(),
                    amount=test_amount
                )
            )
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            recent_blockhash = await client.get_latest_blockhash()
            transaction = Transaction(recent_blockhash=recent_blockhash.value.blockhash)
            transaction.add(create_account_ix)  # –°–æ–∑–¥–∞–µ–º account –¥–ª—è mint
            transaction.add(initialize_mint_ix)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º mint
            transaction.add(create_token_account_ix)  # –°–æ–∑–¥–∞–µ–º token account
            transaction.add(mint_to_ix)  # –ú–∏–Ω—Ç–∏–º —Ç–æ–∫–µ–Ω—ã
            
            # üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ü–û–î–ü–ò–°–ê–ù–ò–ï: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ keypairs
            # payer_keypair - fee payer, mint_keypair - –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mint account
            transaction.sign(self.payer_keypair, mint_keypair)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            print(f"[SEND] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
            result = await client.send_transaction(
                transaction,
                opts=TxOpts(skip_preflight=False, preflight_commitment="confirmed")
            )
            
            signature = result.value
            print(f"[SIGNATURE] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {signature}")
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            print(f"[WAIT] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
            await client.confirm_transaction(signature)
            
            print(f"‚úÖ [SUCCESS] SPL —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            token_info = {
                "success": True,
                "mint_address": str(mint_keypair.pubkey()),
                "token_account": str(token_account),
                "owner": str(self.payer_keypair.pubkey()),
                "amount": test_amount,
                "decimals": 6,
                "ui_amount": test_amount / (10 ** 6),
                "signature": str(signature)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
            import json
            with open("test_spl_token_info.json", "w", encoding="utf-8") as f:
                json.dump(token_info, f, indent=2, ensure_ascii=False)
            
            print(f"[SAVE] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ test_spl_token_info.json")
            
            await client.close()
            return token_info
            
        except Exception as e:
            print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SPL —Ç–æ–∫–µ–Ω–∞: {e}")
            return {"success": False, "error": str(e)}

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ === –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û SPL –¢–û–ö–ï–ù–ê ===")
    
    creator = TestSPLTokenCreator()
    result = await creator.create_test_token()
    
    if result["success"]:
        print(f"\nüéâ === –¢–û–ö–ï–ù –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û ===")
        print(f"Mint Address: {result['mint_address']}")
        print(f"Token Account: {result['token_account']}")
        print(f"Amount: {result['ui_amount']} —Ç–æ–∫–µ–Ω–æ–≤")
        print(f"Signature: {result['signature']}")
        print(f"\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å TokenExploit –Ω–∞ —ç—Ç–æ–º SPL —Ç–æ–∫–µ–Ω–µ!")
    else:
        print(f"\n‚ùå === –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –¢–û–ö–ï–ù–ê ===")
        print(f"Error: {result['error']}")

if __name__ == "__main__":
    asyncio.run(main())
