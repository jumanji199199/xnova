#!/usr/bin/env python3
"""
üß™ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ê–ö–ö–ê–£–ù–¢–û–í –î–õ–Ø EXPLOIT FRAMEWORK
–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
"""

import asyncio
import json
import os
import sys
from typing import Dict, List, Optional
from dataclasses import dataclass
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

from solders.keypair import Keypair
from solders.pubkey import Pubkey
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Commitment
from solana.transaction import Transaction
from solders.system_program import create_account, CreateAccountParams, transfer, TransferParams
from solders.system_program import ID as SYSTEM_PROGRAM_ID
from dotenv import load_dotenv

@dataclass
class TestAccountInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ç–µ—Å—Ç–æ–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ"""
    address: str
    account_type: str
    lamports: int
    owner: str
    vulnerability_type: str
    creation_time: str

class TestTokenCreator:
    """–°–æ–∑–¥–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ —É—è–∑–≤–∏–º—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    def __init__(self):
        load_dotenv()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.privkey_hex = os.getenv('SOLANA_PRIVKEY')
        self.target_address = os.getenv('SOLANA_TARGET_ADDRESS')
        
        if not self.privkey_hex:
            raise ValueError("SOLANA_PRIVKEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            
        # –°–æ–∑–¥–∞–µ–º keypair
        privkey_bytes = bytes.fromhex(self.privkey_hex)
        self.payer_keypair = Keypair.from_bytes(privkey_bytes)
        
        # RPC endpoints —Å fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π mainnet endpoint
        primary_rpc = os.getenv('SOLANA_RPC_URL', 'https://api.mainnet.solana.com')
        self.rpc_endpoints = [
            primary_rpc,
            "https://api.mainnet.solana.com",
            "https://rpc.ankr.com/solana"
        ]
        self.current_rpc_index = 0
        
        print(f"[TARGET] Payer: {self.payer_keypair.pubkey()}")
        print(f"[TARGET] Target: {self.target_address}")
    
    async def get_rpc_client(self) -> AsyncClient:
        """–ü–æ–ª—É—á–∏—Ç—å RPC –∫–ª–∏–µ–Ω—Ç —Å fallback –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        for i, endpoint in enumerate(self.rpc_endpoints):
            try:
                print(f"[RPC] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫: {endpoint}")
                client = AsyncClient(endpoint)
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º get_slot() –≤–º–µ—Å—Ç–æ get_health()
                await client.get_slot()
                print(f"[RPC] ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {endpoint}")
                self.current_rpc_index = i
                return client
            except Exception as e:
                print(f"[RPC] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {endpoint}: {e}")
                if i == len(self.rpc_endpoints) - 1:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É RPC endpoint: {self.rpc_endpoints}")
                continue
    
    async def create_test_accounts(self, num_accounts: int = 3) -> List[TestAccountInfo]:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏"""
        
        print(f"[CREATE] –°–æ–∑–¥–∞–µ–º {num_accounts} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        test_accounts = []
        
        async with await self.get_rpc_client() as client:
            
            for i in range(num_accounts):
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π keypair –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                test_keypair = Keypair()
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
                if i == 0:
                    # –ê–∫–∫–∞—É–Ω—Ç —Å –∏–∑–±—ã—Ç–æ—á–Ω—ã–º–∏ lamports
                    space = 0  # –ü—Ä–æ—Å—Ç–æ–π –∞–∫–∫–∞—É–Ω—Ç
                    rent_exempt = await client.get_minimum_balance_for_rent_exemption(space)
                    lamports = rent_exempt.value + 5_000_000  # +0.005 SOL —Å–≤–µ—Ä—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ
                    vuln_type = "excess_lamports"
                elif i == 1:
                    # –ê–∫–∫–∞—É–Ω—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ lamports (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è rent)
                    space = 100
                    rent_exempt = await client.get_minimum_balance_for_rent_exemption(space)
                    lamports = max(1_000_000, rent_exempt.value - 100_000)  # –ß—É—Ç—å –º–µ–Ω—å—à–µ rent exempt
                    vuln_type = "insufficient_rent"
                else:
                    # –û–±—ã—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –æ–±—â–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    space = 200
                    rent_exempt = await client.get_minimum_balance_for_rent_exemption(space)
                    lamports = rent_exempt.value
                    vuln_type = "normal_account"
                
                print(f"[ACCOUNT] {i+1}: {lamports / 1_000_000_000:.9f} SOL, space: {space}, type: {vuln_type}")
                
                # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
                create_ix = create_account(
                    CreateAccountParams(
                        from_pubkey=self.payer_keypair.pubkey(),
                        to_pubkey=test_keypair.pubkey(),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: to_pubkey –≤–º–µ—Å—Ç–æ new_account_pubkey
                        lamports=lamports,
                        space=space,
                        owner=SYSTEM_PROGRAM_ID  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: owner –≤–º–µ—Å—Ç–æ program_id
                    )
                )
                
                # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                try:
                    transaction = Transaction()
                    transaction.add(create_ix)
                    
                    signature = await client.send_transaction(
                        transaction,
                        self.payer_keypair,
                        test_keypair
                    )
                    
                    print(f"[SENT] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {signature.value}")
                    print(f"[WAIT] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
                    
                    # –ö–†–ò–¢–ò–ß–ù–û: –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞!
                    try:
                        confirmation = await client.confirm_transaction(
                            signature.value,
                            commitment=Commitment("confirmed")
                        )
                        
                        if confirmation.value[0].err is None:
                            print(f"[CONFIRMED] –ê–∫–∫–∞—É–Ω—Ç {i+1} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {test_keypair.pubkey()}")
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                            test_accounts.append(TestAccountInfo(
                                address=str(test_keypair.pubkey()),
                                account_type=f"test_account_{i+1}",
                                lamports=lamports,
                                owner=str(SYSTEM_PROGRAM_ID),
                                vulnerability_type=vuln_type,
                                creation_time=datetime.now().isoformat()
                            ))
                            
                            print(f"[SUCCESS] –ê–∫–∫–∞—É–Ω—Ç {i+1} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞–±–æ—Ä")
                        else:
                            print(f"[FAILED] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {i+1} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞—Å—å: {confirmation.value[0].err}")
                            continue
                            
                    except Exception as confirm_e:
                        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {i+1}: {confirm_e}")
                        continue
                    
                except Exception as e:
                    print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {i+1}: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    continue
        
        return test_accounts
    

    
    async def create_test_suite(self) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        print("[SUITE] === –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ù–ê–ë–û–†–ê –î–õ–Ø EXPLOIT FRAMEWORK ===")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        test_accounts = await self.create_test_accounts(5)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        test_suite = {
            "creation_time": datetime.now().isoformat(),
            "test_accounts": [
                {
                    "address": acc.address,
                    "type": acc.account_type,
                    "lamports": acc.lamports,
                    "owner": acc.owner,
                    "vulnerability": acc.vulnerability_type,
                    "created": acc.creation_time
                }
                for acc in test_accounts
            ],
            "test_targets": {
                "account_exploits": [acc.address for acc in test_accounts],
                "system_exploits": [str(SYSTEM_PROGRAM_ID)],
                "known_addresses": [
                    "11111111111111111111111111111111",  # System Program
                    "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",  # Token Program
                    "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"  # Associated Token Program
                ]
            },
            "payer_address": str(self.payer_keypair.pubkey()),
            "target_address": self.target_address,
            "total_cost_sol": sum(acc.lamports for acc in test_accounts) / 1_000_000_000
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        filename = f"test_exploit_suite_{int(datetime.now().timestamp())}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(test_suite, f, indent=2, ensure_ascii=False)
        
        print(f"[SAVE] –¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        
        return test_suite

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        creator = TestTokenCreator()
        test_suite = await creator.create_test_suite()
        
        print("\n[SUCCESS] === –¢–ï–°–¢–û–í–´–ô –ù–ê–ë–û–† –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û ===")
        print(f"[INFO] –¢–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(test_suite['test_accounts'])}")
        print(f"[COST] –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {test_suite['total_cost_sol']:.9f} SOL")
        
        print("\n[TARGETS] –¶–ï–õ–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        for exploit_type, targets in test_suite['test_targets'].items():
            print(f"  {exploit_type}: {len(targets)} —Ü–µ–ª–µ–π")
            for target in targets:
                print(f"    - {target}")
        
        return test_suite
        
    except Exception as e:
        print(f"[CRITICAL] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
