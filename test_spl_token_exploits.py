#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–ï–°–¢–ï–† –≠–ö–°–ü–õ–û–ô–¢–û–í –ù–ê –°–û–ó–î–ê–ù–ù–û–ú SPL –¢–û–ö–ï–ù–ï
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TokenExploit –Ω–∞ –Ω–∞—à–µ–º –Ω–æ–≤–æ–º SPL —Ç–æ–∫–µ–Ω–µ
"""

import sys
import os
import asyncio
import json
from dotenv import load_dotenv
from solders.keypair import Keypair
from solders.pubkey import Pubkey

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
if sys.platform == "win32":
    import codecs
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), "src"))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–ª–æ–π—Ç—ã
from exploits.account_exploit import AccountExploit
from exploits.token_exploit import TokenExploit

class SPLTokenExploitTester:
    """–¢–µ—Å—Ç–µ—Ä —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–º SPL —Ç–æ–∫–µ–Ω–µ"""
    
    def __init__(self):
        load_dotenv()
        self.setup_config()
        self.load_token_info()
        
    def setup_config(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # RPC URL —Å API –∫–ª—é—á–æ–º
        self.rpc_url = os.getenv("SOLANA_RPC_URL", "https://api.mainnet.solana.com")
        print(f"[RPC] –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint: {self.rpc_url}")
        
        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫–æ—à–µ–ª—å–∫–∞
        privkey_hex = os.getenv("SOLANA_PRIVKEY")
        if not privkey_hex:
            raise ValueError("[ERROR] SOLANA_PRIVKEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
        try:
            privkey_bytes = bytes.fromhex(privkey_hex)
            self.payer_keypair = Keypair.from_bytes(privkey_bytes)
        except Exception as e:
            raise ValueError(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: {e}")
        
        print(f"[WALLET] –ö–æ—à–µ–ª–µ–∫: {self.payer_keypair.pubkey()}")
        
    def load_token_info(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º SPL —Ç–æ–∫–µ–Ω–µ"""
        try:
            with open("simple_spl_token_info.json", "r", encoding="utf-8") as f:
                self.token_info = json.load(f)
            
            print(f"[TOKEN] –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SPL —Ç–æ–∫–µ–Ω–µ:")
            print(f"  Mint: {self.token_info['mint_address']}")
            print(f"  Token Account: {self.token_info['token_account']}")
            print(f"  Amount: {self.token_info.get('ui_amount', self.token_info.get('amount', 'N/A'))} —Ç–æ–∫–µ–Ω–æ–≤")
            
        except FileNotFoundError:
            print(f"‚ùå [ERROR] –§–∞–π–ª simple_spl_token_info.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print(f"    –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ create_simple_spl_token.py")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ: {e}")
            sys.exit(1)
    
    async def test_account_exploit_on_token(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AccountExploit –Ω–∞ mint –∏ token accounts"""
        print(f"\nüîç [TEST 1] –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AccountExploit –ù–ê SPL –¢–û–ö–ï–ù–ï...")
        
        try:
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AccountExploit —Å attacker_keypair
            account_exploit = AccountExploit(
                attacker_keypair=self.payer_keypair,
                rpc_url=self.rpc_url
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ mint account
            print(f"[SCAN] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ mint account: {self.token_info['mint_address']}")
            mint_pubkey = Pubkey.from_string(self.token_info['mint_address'])
            
            scan_result = await account_exploit.scan_target(mint_pubkey)
            print(f"[SCAN RESULT] Mint account: {scan_result}")
            
            if scan_result.get('vulnerable', False):
                print(f"[EXPLOIT] Mint account —É—è–∑–≤–∏–º! –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —ç–∫—Å–ø–ª–æ–π—Ç...")
                prepare_result = await account_exploit.prepare_exploit(mint_pubkey)
                print(f"[PREPARE] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {prepare_result}")
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ bool, —Ç–∞–∫ –∏ dict –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                is_prepared = prepare_result if isinstance(prepare_result, bool) else prepare_result.get('prepared', False)
                if is_prepared:
                    print(f"[EXECUTE] –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–ª–æ–π—Ç...")
                    execute_result = await account_exploit.execute_exploit(mint_pubkey)
                    print(f"[EXECUTE RESULT] {execute_result}")
                else:
                    print(f"[SKIP] –≠–∫—Å–ø–ª–æ–π—Ç –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω")
            else:
                print(f"[INFO] Mint account –Ω–µ —É—è–∑–≤–∏–º (–æ–∂–∏–¥–∞–µ–º–æ)")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ token account
            print(f"\n[SCAN] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ token account: {self.token_info['token_account']}")
            token_account_pubkey = Pubkey.from_string(self.token_info['token_account'])
            
            scan_result = await account_exploit.scan_target(token_account_pubkey)
            print(f"[SCAN RESULT] Token account: {scan_result}")
            
            if scan_result.get('vulnerable', False):
                print(f"[EXPLOIT] Token account —É—è–∑–≤–∏–º! –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —ç–∫—Å–ø–ª–æ–π—Ç...")
                prepare_result = await account_exploit.prepare_exploit(token_account_pubkey)
                print(f"[PREPARE] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {prepare_result}")
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ bool, —Ç–∞–∫ –∏ dict –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                is_prepared = prepare_result if isinstance(prepare_result, bool) else prepare_result.get('prepared', False)
                if is_prepared:
                    print(f"[EXECUTE] –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–ª–æ–π—Ç...")
                    execute_result = await account_exploit.execute_exploit(token_account_pubkey)
                    print(f"[EXECUTE RESULT] {execute_result}")
                else:
                    print(f"[SKIP] –≠–∫—Å–ø–ª–æ–π—Ç –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω")
            else:
                print(f"[INFO] Token account –Ω–µ —É—è–∑–≤–∏–º (–æ–∂–∏–¥–∞–µ–º–æ)")
                
            return {"success": True, "tested": ["mint_account", "token_account"]}
            
        except Exception as e:
            print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AccountExploit: {e}")
            return {"success": False, "error": str(e)}
    
    async def test_token_exploit_on_token(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç TokenExploit –Ω–∞ SPL —Ç–æ–∫–µ–Ω–µ"""
        print(f"\nü™ô [TEST 2] –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TokenExploit –ù–ê SPL –¢–û–ö–ï–ù–ï...")
        
        try:
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TokenExploit —Å attacker_keypair
            token_exploit = TokenExploit(
                attacker_keypair=self.payer_keypair,
                rpc_url=self.rpc_url
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –Ω–∞—à–µ–º token account
            print(f"[SCAN] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ token account: {self.token_info['token_account']}")
            token_account_pubkey = Pubkey.from_string(self.token_info['token_account'])
            
            scan_result = await token_exploit.scan_target(token_account_pubkey)
            print(f"[SCAN RESULT] Token account: {scan_result}")
            
            if scan_result.get('vulnerable', False):
                print(f"[EXPLOIT] Token account —É—è–∑–≤–∏–º! –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —ç–∫—Å–ø–ª–æ–π—Ç...")
                prepare_result = await token_exploit.prepare_exploit(token_account_pubkey)
                print(f"[PREPARE] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {prepare_result}")
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ bool, —Ç–∞–∫ –∏ dict –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                is_prepared = prepare_result if isinstance(prepare_result, bool) else prepare_result.get('prepared', False)
                if is_prepared:
                    print(f"[EXECUTE] –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–ª–æ–π—Ç...")
                    execute_result = await token_exploit.execute_exploit(token_account_pubkey)
                    print(f"[EXECUTE RESULT] {execute_result}")
                else:
                    print(f"[SKIP] –≠–∫—Å–ø–ª–æ–π—Ç –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω")
            else:
                print(f"[INFO] Token account –Ω–µ —É—è–∑–≤–∏–º –∏–ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∞–º (–æ–∂–∏–¥–∞–µ–º–æ)")
            
            # –¢–∞–∫–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ mint account
            print(f"\n[SCAN] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ mint account: {self.token_info['mint_address']}")
            mint_pubkey = Pubkey.from_string(self.token_info['mint_address'])
            
            scan_result = await token_exploit.scan_target(mint_pubkey)
            print(f"[SCAN RESULT] Mint account: {scan_result}")
            
            return {"success": True, "tested": ["token_account", "mint_account"]}
            
        except Exception as e:
            print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TokenExploit: {e}")
            return {"success": False, "error": str(e)}
    
    async def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –Ω–∞ SPL —Ç–æ–∫–µ–Ω–µ"""
        print(f"üß™ === –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–ö–°–ü–õ–û–ô–¢–û–í –ù–ê SPL –¢–û–ö–ï–ù–ï ===")
        print(f"[TOKEN] –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π SPL —Ç–æ–∫–µ–Ω: {self.token_info['mint_address']}")
        print(f"[BALANCE] –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤: {self.token_info.get('ui_amount', self.token_info.get('amount', 0))}")
        
        results = {}
        
        # –¢–µ—Å—Ç 1: AccountExploit
        results["account_exploit"] = await self.test_account_exploit_on_token()
        
        # –¢–µ—Å—Ç 2: TokenExploit  
        results["token_exploit"] = await self.test_token_exploit_on_token()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open("spl_token_exploit_test_results.json", "w", encoding="utf-8") as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
        success_count = sum(1 for result in results.values() if result.get("success", False))
        total_tests = len(results)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_tests}")
        print(f"üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ spl_token_exploit_test_results.json")
        
        if success_count == total_tests:
            print(f"üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print(f"üí° –≠–∫—Å–ø–ª–æ–π—Ç-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ SPL —Ç–æ–∫–µ–Ω–∞–º–∏!")
        else:
            print(f"‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
        
        return results

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SPLTokenExploitTester()
    results = await tester.run_comprehensive_test()
    
    return results

if __name__ == "__main__":
    asyncio.run(main())
