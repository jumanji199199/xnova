#!/usr/bin/env python3
"""
üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢–ï–† –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• SOLANA –≠–ö–°–ü–õ–û–ô–¢–û–í
===============================================

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –í–°–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —ç–∫—Å–ø–ª–æ–π—Ç—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö Solana.

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
‚úÖ –£–±—Ä–∞–Ω—ã –æ–ø–∞—Å–Ω—ã–µ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏  
‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã RPC endpoints
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã fallback endpoints
‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤

–¶–ï–õ–¨: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å–ø–ª–æ–π—Ç—ã –Ω–∞ –†–ï–ê–õ–¨–ù–´–• –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ
"""

import asyncio
import json
import logging
import os
import time
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass

from solders.keypair import Keypair
from solders.pubkey import Pubkey as PublicKey
from solana.rpc.async_api import AsyncClient

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
from src.exploits.account_exploit import AccountExploit
from src.exploits.token_exploit import TokenExploit
from src.exploits.program_exploit import ProgramExploit
from src.exploits.reentrancy_exploit import ReentrancyExploit
from src.exploits.memory_exploit import MemoryExploit
from src.exploits.validator_exploit import ValidatorExploit
from src.exploits.safety_checks import ExploitSafetyChecker

@dataclass
class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–ª–æ–π—Ç–∞"""
    exploit_name: str
    target_address: str
    success: bool
    extracted_value: float
    error_message: Optional[str]
    execution_time: float
    safety_checks_passed: bool
    timestamp: datetime

class ComprehensiveExploitTester:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞"""
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –¥–ª—è Windows)
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('comprehensive_exploit_test.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.load_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.safety_checker = ExploitSafetyChecker(self.target_address)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_results: List[TestResult] = []
        
        self.logger.info("–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.logger.info(f"–¶–µ–ª–µ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç: {self.target_address}")
        self.logger.info(f"RPC URL: {self.rpc_url}")
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.target_address = os.getenv("SOLANA_TARGET_ADDRESS")
        if not self.target_address:
            raise ValueError("üö® SOLANA_TARGET_ADDRESS –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
        privkey_hex = os.getenv("SOLANA_PRIVKEY")
        if not privkey_hex:
            raise ValueError("üö® SOLANA_PRIVKEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        try:
            privkey_bytes = bytes.fromhex(privkey_hex)
            self.attacker_keypair = Keypair.from_bytes(privkey_bytes)
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º pubkey() –º–µ—Ç–æ–¥ –≤–º–µ—Å—Ç–æ public_key –∞—Ç—Ä–∏–±—É—Ç–∞
            self.logger.info(f"–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω: {self.attacker_keypair.pubkey()}")
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: {e}")
        
        # RPC URL
        self.rpc_url = os.getenv("SOLANA_RPC_URL", "https://api.mainnet.solana.com")
        self.network = os.getenv("SOLANA_NETWORK", "mainnet")
        
        self.logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    def get_test_targets(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        
        # üéØ –†–ï–ê–õ–¨–ù–´–ï –ö–û–ù–¢–†–ê–ö–¢–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø (–ø—É–±–ª–∏—á–Ω—ã–µ, –∏–∑–≤–µ—Å—Ç–Ω—ã–µ)
        test_targets = [
            # DeFi –ø—Ä–æ—Ç–æ–∫–æ–ª—ã (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ —É—è–∑–≤–∏–º—ã–µ)
            "11111111111111111111111111111111",  # System Program (–¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤)
            "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",  # Token Program
            "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL",  # Associated Token Program
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            self.target_address,  # –ù–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
            
            # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ DeFi –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            # –ü—Ä–∏–º–µ—Ä—ã: Serum DEX, Raydium, Orca –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
            # –í–ê–ñ–ù–û: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö
        ]
        
        self.logger.info(f"üéØ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(test_targets)} —Ü–µ–ª–µ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return test_targets
    
    async def test_single_exploit(self, exploit_class, target_address: str) -> TestResult:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —ç–∫—Å–ø–ª–æ–π—Ç–∞ –Ω–∞ –æ–¥–Ω–æ–º —Ü–µ–ª–µ–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
        
        Args:
            exploit_class: –ö–ª–∞—Å—Å —ç–∫—Å–ø–ª–æ–π—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            target_address: –ê–¥—Ä–µ—Å —Ü–µ–ª–µ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            TestResult: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        
        exploit_name = exploit_class.__name__
        start_time = time.time()
        
        try:
            self.logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {exploit_name} –Ω–∞ {target_address}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            target_pubkey = PublicKey.from_string(target_address)
            safety_passed = self.safety_checker.validate_target_account(target_pubkey, exploit_name)
            
            if not safety_passed:
                return TestResult(
                    exploit_name=exploit_name,
                    target_address=target_address,
                    success=False,
                    extracted_value=0.0,
                    error_message="–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞",
                    execution_time=time.time() - start_time,
                    safety_checks_passed=False,
                    timestamp=datetime.now()
                )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–ª–æ–π—Ç–∞
            exploit = exploit_class(
                attacker_keypair=self.attacker_keypair,
                rpc_url=self.rpc_url
            )
            
            # –û–°–ù–û–í–ù–û–ô –ü–†–û–¶–ï–°–° –≠–ö–°–ü–õ–û–ò–¢–ê: —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ + –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            # –®–∞–≥ 1: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
            scan_result = await exploit.scan_target(target_pubkey)
            
            if not scan_result or not scan_result.get("vulnerable", False):
                result = {
                    "success": False,
                    "error": f"–¶–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—è–∑–≤–∏–º–æ–π: {scan_result.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')}",
                    "extracted_sol": 0.0,
                    "extracted_tokens": {}
                }
            else:
                # –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–ª–æ–π—Ç–∞
                prepared = await exploit.prepare_exploit(target_pubkey)
                
                if not prepared:
                    result = {
                        "success": False,
                        "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —ç–∫—Å–ø–ª–æ–π—Ç–∞",
                        "extracted_sol": 0.0,
                        "extracted_tokens": {}
                    }
                else:
                    # –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–ª–æ–π—Ç–∞ (–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ)
                    exploit_result = await exploit.execute_exploit(target_pubkey)
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ExploitResult –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ç–µ—Å—Ç–µ—Ä–∞
                    if exploit_result and exploit_result.status.name == "SUCCESS":
                        result = {
                            "success": True,
                            "extracted_sol": exploit_result.extracted_value or 0.0,
                            "extracted_tokens": {"total": exploit_result.extracted_value or 0.0},
                            "signatures": exploit_result.transaction_signatures or []
                        }
                    else:
                        error_msg = exploit_result.error_message if exploit_result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                        result = {
                            "success": False,
                            "error": error_msg,
                            "extracted_sol": 0.0,
                            "extracted_tokens": {}
                        }
            
            execution_time = time.time() - start_time
            
            if result and result.get("success", False):
                extracted_value = result.get("extracted_sol", 0.0) + result.get("extracted_tokens", {}).get("total", 0.0)
                
                self.logger.info(f"‚úÖ {exploit_name}: –£—Å–ø–µ—à–Ω–æ! –ò–∑–≤–ª–µ—á–µ–Ω–æ ~{extracted_value:.6f} SOL")
                
                return TestResult(
                    exploit_name=exploit_name,
                    target_address=target_address,
                    success=True,
                    extracted_value=extracted_value,
                    error_message=None,
                    execution_time=execution_time,
                    safety_checks_passed=True,
                    timestamp=datetime.now()
                )
            else:
                error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞") if result else "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
                
                self.logger.info(f"‚ùå {exploit_name}: –ù–µ—É–¥–∞—á–∞ - {error_msg}")
                
                return TestResult(
                    exploit_name=exploit_name,
                    target_address=target_address,
                    success=False,  
                    extracted_value=0.0,
                    error_message=error_msg,
                    execution_time=execution_time,
                    safety_checks_passed=True,
                    timestamp=datetime.now()
                )
                
        except Exception as e:
            execution_time = time.time() - start_time
            error_msg = str(e)
            
            self.logger.error(f"üí• {exploit_name}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {error_msg}")
            
            return TestResult(
                exploit_name=exploit_name,
                target_address=target_address,
                success=False,
                extracted_value=0.0,
                error_message=error_msg,
                execution_time=execution_time,
                safety_checks_passed=False,
                timestamp=datetime.now()
            )
    
    async def run_comprehensive_tests(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤"""
        
        self.logger.info("üöÄ –ù–ê–ß–ê–õ–û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –≠–ö–°–ü–õ–û–ô–¢–û–í")
        self.logger.info("=" * 60)
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        exploit_classes = [
            AccountExploit,
            TokenExploit,
            ProgramExploit,
            ReentrancyExploit,
            MemoryExploit,
            ValidatorExploit
        ]
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        target_addresses = self.get_test_targets()
        
        total_tests = len(exploit_classes) * len(target_addresses)
        current_test = 0
        
        self.logger.info(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        self.logger.info(f"üéØ –≠–∫—Å–ø–ª–æ–π—Ç–æ–≤: {len(exploit_classes)}")
        self.logger.info(f"üéØ –¶–µ–ª–µ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(target_addresses)}")
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        for exploit_class in exploit_classes:
            for target_address in target_addresses:
                current_test += 1
                
                self.logger.info(f"\nüìã –¢–ï–°–¢ {current_test}/{total_tests}")
                self.logger.info(f"üîß –≠–∫—Å–ø–ª–æ–π—Ç: {exploit_class.__name__}")
                self.logger.info(f"üéØ –¶–µ–ª–µ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç: {target_address}")
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
                result = await self.test_single_exploit(exploit_class, target_address)
                self.test_results.append(result)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ RPC
                await asyncio.sleep(1)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        await self.generate_final_report()
    
    async def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        self.logger.info("\n" + "=" * 60)
        self.logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        self.logger.info("=" * 60)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_tests = len(self.test_results)
        successful_tests = len([r for r in self.test_results if r.success])
        failed_tests = total_tests - successful_tests
        total_extracted = sum(r.extracted_value for r in self.test_results)
        
        self.logger.info(f"üéØ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests} ({successful_tests/total_tests*100:.1f}%)")
        self.logger.info(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests} ({failed_tests/total_tests*100:.1f}%)")
        self.logger.info(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏–π: {total_extracted:.6f} SOL")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç–∫—Å–ø–ª–æ–π—Ç–∞–º
        exploit_stats = {}
        for result in self.test_results:
            if result.exploit_name not in exploit_stats:
                exploit_stats[result.exploit_name] = {"success": 0, "total": 0, "extracted": 0.0}
            
            exploit_stats[result.exploit_name]["total"] += 1
            if result.success:
                exploit_stats[result.exploit_name]["success"] += 1
                exploit_stats[result.exploit_name]["extracted"] += result.extracted_value
        
        self.logger.info("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –≠–ö–°–ü–õ–û–ô–¢–ê–ú:")
        for exploit_name, stats in exploit_stats.items():
            success_rate = stats["success"] / stats["total"] * 100
            self.logger.info(f"  {exploit_name}: {stats['success']}/{stats['total']} ({success_rate:.1f}%) - {stats['extracted']:.6f} SOL")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ JSON
        report_data = {
            "timestamp": datetime.now().isoformat(),
            "summary": {
                "total_tests": total_tests,
                "successful_tests": successful_tests,
                "failed_tests": failed_tests,
                "success_rate": successful_tests/total_tests*100,
                "total_extracted_sol": total_extracted
            },
            "exploit_statistics": exploit_stats,
            "detailed_results": [
                {
                    "exploit_name": r.exploit_name,
                    "target_address": r.target_address,
                    "success": r.success,
                    "extracted_value": r.extracted_value,
                    "error_message": r.error_message,
                    "execution_time": r.execution_time,
                    "safety_checks_passed": r.safety_checks_passed,
                    "timestamp": r.timestamp.isoformat()
                }
                for r in self.test_results
            ]
        }
        
        report_filename = f"comprehensive_exploit_test_report_{int(time.time())}.json"
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        self.logger.info(f"üíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        self.generate_recommendations()
    
    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        self.logger.info("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ù–ê –û–°–ù–û–í–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        
        successful_exploits = [r for r in self.test_results if r.success]
        failed_exploits = [r for r in self.test_results if not r.success]
        
        if successful_exploits:
            self.logger.info(f"‚úÖ {len(successful_exploits)} —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            self.logger.info("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        if failed_exploits:
            self.logger.info(f"‚ùå {len(failed_exploits)} —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –Ω–µ—É–¥–∞—á
            error_categories = {}
            for result in failed_exploits:
                if result.error_message:
                    if "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏" in result.error_message.lower():
                        error_categories["safety"] = error_categories.get("safety", 0) + 1
                    elif "rpc" in result.error_message.lower():
                        error_categories["rpc"] = error_categories.get("rpc", 0) + 1
                    else:
                        error_categories["other"] = error_categories.get("other", 0) + 1
            
            if error_categories.get("safety", 0) > 0:
                self.logger.info("   üö® –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            if error_categories.get("rpc", 0) > 0:
                self.logger.info("   üîó –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å RPC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
            if error_categories.get("other", 0) > 0:
                self.logger.info("   üîß –ù–∞–π–¥–µ–Ω—ã –¥—Ä—É–≥–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        
        self.logger.info("\nüéâ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–µ—Ä–∞
        tester = ComprehensiveExploitTester()
        await tester.run_comprehensive_tests()
        
    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
