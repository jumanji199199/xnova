#!/usr/bin/env python3
"""
–ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –õ–ê–£–ù–ß–ï–† –≠–ö–°–ü–õ–û–ô–¢–û–í SOLANA
–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏ –∏–∑ PDF –∞–Ω–∞–ª–∏–∑–∞

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ, –≤—ã—Å–æ–∫–∏–µ, —Å—Ä–µ–¥–Ω–∏–µ)
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞—Ç–∞–∫–∏
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏ –ª–æ–≥–∏
- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ devnet/testnet)
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import asyncio
import threading
import json
import time
from pathlib import Path
from typing import Dict, List, Any, Optional
import logging

from solders.keypair import Keypair
from solders.pubkey import Pubkey as PublicKey

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from advanced_exploit_suite import AdvancedExploitSuite

class ExploitLauncherGUI:
    """–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Solana Exploit Launcher - PDF Analysis Framework")
        self.root.geometry("1200x800")
        self.root.configure(bg='#2b2b2b')
        
        # –°—Ç–∏–ª—å
        self.style = ttk.Style()
        self.style.theme_use('clam')
        self.configure_styles()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.exploit_suite: Optional[AdvancedExploitSuite] = None
        self.is_running = False
        self.current_results = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
        self.exploit_settings = {
            "rpc_endpoint": tk.StringVar(value="https://api.devnet.solana.com"),
            "run_critical": tk.BooleanVar(value=True),
            "run_memory_region": tk.BooleanVar(value=True),
            "run_advanced_memory": tk.BooleanVar(value=False),
            "run_validator_rce": tk.BooleanVar(value=False),
            "target_accounts": tk.StringVar(value=""),
            "validator_endpoints": tk.StringVar(value="https://api.devnet.solana.com"),
            "safe_mode": tk.BooleanVar(value=True)
        }
        
        self.setup_gui()
        self.setup_logging()
        
    def configure_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.style.configure('Title.TLabel', 
                           font=('Arial', 16, 'bold'),
                           background='#2b2b2b',
                           foreground='#ffffff')
        
        self.style.configure('Header.TLabel',
                           font=('Arial', 12, 'bold'),
                           background='#2b2b2b', 
                           foreground='#00ff00')
        
        self.style.configure('Critical.TButton',
                           font=('Arial', 10, 'bold'),
                           background='#ff4444')
        
        self.style.configure('Success.TButton',
                           font=('Arial', 10, 'bold'),
                           background='#44ff44')
        
    def setup_gui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(self.root)
        title_frame.pack(fill='x', padx=10, pady=5)
        
        ttk.Label(title_frame, text="üöÄ SOLANA EXPLOIT LAUNCHER", 
                 style='Title.TLabel').pack()
        ttk.Label(title_frame, text="–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ 155 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π PDF 'Pwning Blockchain for Fun and Profit'",
                 style='Header.TLabel').pack()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.PanedWindow(self.root, orient='horizontal')
        main_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        left_frame = ttk.Frame(main_frame)
        main_frame.add(left_frame, weight=1)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ª–æ–≥–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        right_frame = ttk.Frame(main_frame)
        main_frame.add(right_frame, weight=2)
        
        self.setup_settings_panel(left_frame)
        self.setup_results_panel(right_frame)
        
    def setup_settings_panel(self, parent):
        """–ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        ttk.Label(parent, text="‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –≠–ö–°–ü–õ–û–ô–¢–û–í", 
                 style='Header.TLabel').pack(pady=5)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_frame = ttk.LabelFrame(parent, text="–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_frame.pack(fill='x', padx=5, pady=5)
        
        # RPC Endpoint
        ttk.Label(settings_frame, text="RPC Endpoint:").pack(anchor='w')
        rpc_combo = ttk.Combobox(settings_frame, textvariable=self.exploit_settings["rpc_endpoint"])
        rpc_combo['values'] = [
            "https://api.devnet.solana.com",
            "https://api.testnet.solana.com",
            "http://localhost:8899"
        ]
        rpc_combo.pack(fill='x', padx=5, pady=2)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º
        ttk.Checkbutton(settings_frame, text="üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ devnet/testnet)",
                       variable=self.exploit_settings["safe_mode"]).pack(anchor='w', pady=2)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
        exploits_frame = ttk.LabelFrame(parent, text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤")
        exploits_frame.pack(fill='x', padx=5, pady=5)
        
        ttk.Checkbutton(exploits_frame, text="üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ (35 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π PDF)",
                       variable=self.exploit_settings["run_critical"]).pack(anchor='w')
        ttk.Checkbutton(exploits_frame, text="üß† Memory Region (29 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)",
                       variable=self.exploit_settings["run_memory_region"]).pack(anchor='w')
        ttk.Checkbutton(exploits_frame, text="‚ö° –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ Memory Corruption",
                       variable=self.exploit_settings["run_advanced_memory"]).pack(anchor='w')
        ttk.Checkbutton(exploits_frame, text="üíÄ Validator RCE (–û–ü–ê–°–ù–û!)",
                       variable=self.exploit_settings["run_validator_rce"]).pack(anchor='w')
        
        # –¶–µ–ª–µ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        targets_frame = ttk.LabelFrame(parent, text="–¶–µ–ª–µ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
        targets_frame.pack(fill='x', padx=5, pady=5)
        
        ttk.Label(targets_frame, text="–ê–∫–∫–∞—É–Ω—Ç—ã (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):").pack(anchor='w')
        self.targets_text = tk.Text(targets_frame, height=4, width=40)
        self.targets_text.pack(fill='x', padx=5, pady=2)
        self.targets_text.insert('1.0', "11111111111111111111111111111112\nTokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")
        
        # Validator endpoints
        validators_frame = ttk.LabelFrame(parent, text="Validator Endpoints")
        validators_frame.pack(fill='x', padx=5, pady=5)
        
        ttk.Label(validators_frame, text="Endpoints (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):").pack(anchor='w')
        self.validators_text = tk.Text(validators_frame, height=3, width=40)
        self.validators_text.pack(fill='x', padx=5, pady=2)
        self.validators_text.insert('1.0', "https://api.devnet.solana.com\nhttps://api.testnet.solana.com")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(parent)
        control_frame.pack(fill='x', padx=5, pady=10)
        
        self.start_button = ttk.Button(control_frame, text="üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –≠–ö–°–ü–õ–û–ô–¢–´",
                                      command=self.start_exploits, style='Critical.TButton')
        self.start_button.pack(fill='x', pady=2)
        
        self.stop_button = ttk.Button(control_frame, text="‚èπÔ∏è –û–°–¢–ê–ù–û–í–ò–¢–¨",
                                     command=self.stop_exploits, state='disabled')
        self.stop_button.pack(fill='x', pady=2)
        
        ttk.Button(control_frame, text="üíæ –°–û–•–†–ê–ù–ò–¢–¨ –û–¢–ß–ï–¢",
                  command=self.save_report).pack(fill='x', pady=2)
        
        ttk.Button(control_frame, text="üìä –ü–û–ö–ê–ó–ê–¢–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–£",
                  command=self.show_statistics).pack(fill='x', pady=2)
        
    def setup_results_panel(self, parent):
        """–ü–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ª–æ–≥–æ–≤"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        ttk.Label(parent, text="üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò –õ–û–ì–ò", 
                 style='Header.TLabel').pack(pady=5)
        
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        notebook = ttk.Notebook(parent)
        notebook.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ –ª–æ–≥–æ–≤
        log_frame = ttk.Frame(notebook)
        notebook.add(log_frame, text="üìù –õ–æ–≥–∏")
        
        self.log_text = scrolledtext.ScrolledText(log_frame, 
                                                 bg='#1e1e1e', 
                                                 fg='#00ff00',
                                                 font=('Consolas', 10))
        self.log_text.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_frame = ttk.Frame(notebook)
        notebook.add(results_frame, text="üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        self.results_text = scrolledtext.ScrolledText(results_frame,
                                                     bg='#1e1e1e',
                                                     fg='#ffffff',
                                                     font=('Consolas', 10))
        self.results_text.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_frame = ttk.Frame(notebook)
        notebook.add(stats_frame, text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        self.stats_text = scrolledtext.ScrolledText(stats_frame,
                                                   bg='#1e1e1e',
                                                   fg='#ffff00',
                                                   font=('Consolas', 10))
        self.stats_text.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = ttk.Progressbar(parent, mode='indeterminate')
        self.progress.pack(fill='x', padx=5, pady=5)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(parent, text="–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤")
        self.status_label.pack(pady=5)
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π handler –¥–ª—è GUI
        class GUILogHandler(logging.Handler):
            def __init__(self, text_widget):
                super().__init__()
                self.text_widget = text_widget
                
            def emit(self, record):
                msg = self.format(record)
                self.text_widget.insert(tk.END, msg + '\n')
                self.text_widget.see(tk.END)
                self.text_widget.update()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        # –î–æ–±–∞–≤–ª—è–µ–º GUI handler
        gui_handler = GUILogHandler(self.log_text)
        gui_handler.setFormatter(logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s'
        ))
        logger.addHandler(gui_handler)
        
    def log_message(self, message: str, level: str = "INFO"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = time.strftime("%H:%M:%S")
        formatted_msg = f"[{timestamp}] {level}: {message}"
        
        self.log_text.insert(tk.END, formatted_msg + '\n')
        self.log_text.see(tk.END)
        self.log_text.update()
        
    def update_status(self, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_label.config(text=status)
        self.root.update()
        
    def start_exploits(self):
        """–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_running:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–≠–∫—Å–ø–ª–æ–π—Ç—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã!")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if self.exploit_settings["safe_mode"].get():
            endpoint = self.exploit_settings["rpc_endpoint"].get()
            if "mainnet" in endpoint.lower():
                messagebox.showerror("–û—à–∏–±–∫–∞", 
                    "–í –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mainnet!\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ devnet –∏–ª–∏ testnet.")
                return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç–∫—Å–ø–ª–æ–π—Ç—ã?\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω–æ!"):
            return
            
        self.is_running = True
        self.start_button.config(state='disabled')
        self.stop_button.config(state='normal')
        self.progress.start()
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.run_exploits_thread)
        thread.daemon = True
        thread.start()
        
    def run_exploits_thread(self):
        """–ü–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–ª–æ–π—Ç—ã
            loop.run_until_complete(self.run_exploits_async())
            
        except Exception as e:
            self.log_message(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", "ERROR")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.is_running = False
            self.start_button.config(state='normal')
            self.stop_button.config(state='disabled')
            self.progress.stop()
            self.update_status("–≠–∫—Å–ø–ª–æ–π—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            
    async def run_exploits_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤"""
        self.log_message("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è exploit suite...")
        self.update_status("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º exploit suite
        rpc_endpoint = self.exploit_settings["rpc_endpoint"].get()
        self.exploit_suite = AdvancedExploitSuite(rpc_endpoint)
        
        self.log_message(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {rpc_endpoint}")
        self.log_message(f"Attacker pubkey: {self.exploit_suite.attacker_keypair.pubkey()}")
        
        results = {}
        
        # –ó–∞–ø—É—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
        if self.exploit_settings["run_critical"].get():
            self.update_status("–ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤...")
            self.log_message("–ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –∏–∑ PDF (35 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
            results["critical"] = await self.exploit_suite.run_pdf_critical_exploits()
            self.display_results("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–∫—Å–ø–ª–æ–π—Ç—ã", results["critical"])
            
        if self.exploit_settings["run_memory_region"].get():
            self.update_status("–ó–∞–ø—É—Å–∫ Memory Region —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤...")
            self.log_message("–ó–∞–ø—É—Å–∫ Memory Region —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ (29 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
            results["memory_region"] = await self.exploit_suite.run_memory_region_exploits()
            self.display_results("Memory Region", results["memory_region"])
            
        if self.exploit_settings["run_advanced_memory"].get():
            self.update_status("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö Memory —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤...")
            self.log_message("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö Memory Corruption —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤")
            
            # –ü–∞—Ä—Å–∏–º —Ü–µ–ª–µ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            target_accounts = []
            accounts_text = self.targets_text.get('1.0', tk.END).strip()
            for line in accounts_text.split('\n'):
                line = line.strip()
                if line:
                    try:
                        target_accounts.append(PublicKey.from_string(line))
                    except Exception as e:
                        self.log_message(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç {line}: {e}", "WARNING")
            
            if target_accounts:
                results["advanced_memory"] = await self.exploit_suite.run_advanced_memory_exploits(target_accounts)
                self.display_results("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ Memory", results["advanced_memory"])
            else:
                self.log_message("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ü–µ–ª–µ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤", "WARNING")
                
        if self.exploit_settings["run_validator_rce"].get():
            self.update_status("–ó–∞–ø—É—Å–∫ Validator RCE —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤...")
            self.log_message("–í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—É—Å–∫ Validator RCE —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤!")
            
            # –ü–∞—Ä—Å–∏–º validator endpoints
            validator_endpoints = []
            validators_text = self.validators_text.get('1.0', tk.END).strip()
            for line in validators_text.split('\n'):
                line = line.strip()
                if line:
                    validator_endpoints.append(line)
            
            if validator_endpoints:
                results["validator_rce"] = await self.exploit_suite.run_validator_exploits(validator_endpoints)
                self.display_results("Validator RCE", results["validator_rce"])
            else:
                self.log_message("–ù–µ—Ç validator endpoints", "WARNING")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.current_results = results
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.display_final_statistics()
        
        self.log_message("–í—Å–µ —ç–∫—Å–ø–ª–æ–π—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        self.update_status("–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
    def display_results(self, category: str, results: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤"""
        self.results_text.insert(tk.END, f"\n=== {category.upper()} ===\n")
        self.results_text.insert(tk.END, json.dumps(results, indent=2, ensure_ascii=False, default=str))
        self.results_text.insert(tk.END, "\n" + "="*50 + "\n")
        self.results_text.see(tk.END)
        self.results_text.update()
        
    def display_final_statistics(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.exploit_suite:
            return
            
        stats = f"""
–§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –≠–ö–°–ü–õ–û–ô–¢–û–í
{'='*50}
–í—Å–µ–≥–æ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ: {self.exploit_suite.total_exploits_run}
–£—Å–ø–µ—à–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤: {self.exploit_suite.successful_exploits}
–ù–µ—É–¥–∞—á–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤: {self.exploit_suite.failed_exploits}
–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(self.exploit_suite.successful_exploits / self.exploit_suite.total_exploits_run * 100) if self.exploit_suite.total_exploits_run > 0 else 0:.1f}%

–û–°–ù–û–í–ê–ù–û –ù–ê –ê–ù–ê–õ–ò–ó–ï:
- 155 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ PDF "Pwning Blockchain for Fun and Profit"
- 8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
- 35 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö + 66 –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö + 29 —Å—Ä–µ–¥–Ω–∏—Ö + 25 –Ω–∏–∑–∫–∏—Ö

ATTACKER PUBKEY: {self.exploit_suite.attacker_keypair.pubkey()}
RPC ENDPOINT: {self.exploit_settings["rpc_endpoint"].get()}
TIMESTAMP: {time.strftime("%Y-%m-%d %H:%M:%S")}
"""
        
        self.stats_text.delete('1.0', tk.END)
        self.stats_text.insert('1.0', stats)
        
    def stop_exploits(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤?"):
            self.is_running = False
            self.log_message("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", "WARNING")
            
    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        if not self.current_results:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return
            
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤"
        )
        
        if filename:
            try:
                report = {
                    "metadata": {
                        "timestamp": time.time(),
                        "pdf_analysis_base": "155 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ 'Pwning Blockchain for Fun and Profit'",
                        "attacker_pubkey": str(self.exploit_suite.attacker_keypair.pubkey()) if self.exploit_suite else "N/A",
                        "rpc_endpoint": self.exploit_settings["rpc_endpoint"].get()
                    },
                    "results": self.current_results
                }
                
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(report, f, indent=2, ensure_ascii=False, default=str)
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
                self.log_message(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                
    def show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.exploit_suite:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç–∫—Å–ø–ª–æ–π—Ç—ã!")
            return
            
        stats_window = tk.Toplevel(self.root)
        stats_window.title("–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_window.geometry("600x400")
        
        stats_text = scrolledtext.ScrolledText(stats_window, font=('Consolas', 10))
        stats_text.pack(fill='both', expand=True, padx=10, pady=10)
        
        self.display_final_statistics()
        stats_content = self.stats_text.get('1.0', tk.END)
        stats_text.insert('1.0', stats_content)
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        self.log_message("Exploit Launcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.log_message("–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ 155 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π PDF 'Pwning Blockchain for Fun and Profit'")
        self.log_message("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤")
        
        self.root.mainloop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–ó–∞–ø—É—Å–∫ Solana Exploit Launcher GUI...")
    
    try:
        launcher = ExploitLauncherGUI()
        launcher.run()
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ GUI: {e}")
        raise

if __name__ == "__main__":
    main()
