#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–£–ü–†–û–©–ï–ù–ù–´–ô —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ SPL —Ç–æ–∫–µ–Ω–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è
"""

import sys
import os
import asyncio
from dotenv import load_dotenv
from solders.keypair import Keypair
from solders.pubkey import Pubkey
from solana.rpc.async_api import AsyncClient
from solana.rpc.types import TxOpts
from spl.token.async_client import AsyncToken
from spl.token.constants import TOKEN_PROGRAM_ID

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
if sys.platform == "win32":
    import codecs
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())

class SimpleSPLTokenCreator:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ SPL —Ç–æ–∫–µ–Ω–∞"""
    
    def __init__(self):
        load_dotenv()
        self.setup_config()
        
    def setup_config(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # RPC URL —Å API –∫–ª—é—á–æ–º
        self.rpc_url = os.getenv("SOLANA_RPC_URL", "https://api.mainnet.solana.com")
        print(f"[RPC] –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint: {self.rpc_url}")
        
        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫–æ—à–µ–ª—å–∫–∞
        privkey_hex = os.getenv("SOLANA_PRIVKEY")
        if not privkey_hex:
            raise ValueError("[ERROR] SOLANA_PRIVKEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
        try:
            privkey_bytes = bytes.fromhex(privkey_hex)
            self.payer_keypair = Keypair.from_bytes(privkey_bytes)
        except Exception as e:
            raise ValueError(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: {e}")
        
        print(f"[WALLET] –ö–æ—à–µ–ª–µ–∫: {self.payer_keypair.pubkey()}")
        
    async def create_simple_token(self) -> dict:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π SPL —Ç–æ–∫–µ–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º"""
        print(f"\nü™ô [CREATE] –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ SPL —Ç–æ–∫–µ–Ω–∞...")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RPC
            client = AsyncClient(self.rpc_url)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
            balance_resp = await client.get_balance(self.payer_keypair.pubkey())
            balance_sol = balance_resp.value / 1e9
            print(f"[BALANCE] –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {balance_sol:.9f} SOL")
            
            if balance_sol < 0.01:
                print(f"‚ùå [ERROR] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 0.01 SOL)")
                return {"success": False, "error": "Insufficient balance"}
            
            # üöÄ –£–ü–†–û–©–ï–ù–ù–´–ô –ü–û–î–•–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ–º AsyncToken class
            print(f"[STEP 1] –°–æ–∑–¥–∞–Ω–∏–µ SPL —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ AsyncToken...")
            
            # –°–æ–∑–¥–∞–µ–º AsyncToken instance
            token_client = AsyncToken(
                conn=client,
                pubkey=None,  # Will be set after creation
                program_id=TOKEN_PROGRAM_ID,
                payer=self.payer_keypair
            )
            
            # üéØ –ö–õ–Æ–ß–ï–í–û–ï –£–ü–†–û–©–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º mint —Å –ø–æ–º–æ—â—å—é create_mint
            print(f"[STEP 2] –°–æ–∑–¥–∞–Ω–∏–µ mint account...")
            mint_keypair = Keypair()
            
            # üîß –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π program_id –ø–∞—Ä–∞–º–µ—Ç—Ä
            # AsyncToken.create_mint() –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç mint_keypair
            create_mint_resp = await AsyncToken.create_mint(
                conn=client,
                payer=self.payer_keypair,
                mint_authority=self.payer_keypair.pubkey(),
                freeze_authority=self.payer_keypair.pubkey(),
                decimals=6,
                program_id=TOKEN_PROGRAM_ID  # üöÄ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            )
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: create_mint_resp —ç—Ç–æ AsyncToken –æ–±—ä–µ–∫—Ç, –∏–∑–≤–ª–µ–∫–∞–µ–º pubkey
            token = create_mint_resp  # –≠—Ç–æ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π AsyncToken –æ–±—ä–µ–∫—Ç
            mint_pubkey = token.pubkey  # –ò–∑–≤–ª–µ–∫–∞–µ–º pubkey –∏–∑ –æ–±—ä–µ–∫—Ç–∞
            print(f"[MINT] Mint —Å–æ–∑–¥–∞–Ω: {mint_pubkey}")
            
            # üéØ –°–û–ó–î–ê–ï–ú ASSOCIATED TOKEN ACCOUNT
            print(f"[STEP 3] –°–æ–∑–¥–∞–Ω–∏–µ associated token account...")
            token_account_resp = await token.create_associated_token_account(
                owner=self.payer_keypair.pubkey()
            )
            
            token_account = token_account_resp
            print(f"[TOKEN_ACCOUNT] Token account —Å–æ–∑–¥–∞–Ω: {token_account}")
            
            # üéØ –ú–ò–ù–¢–ò–ú –¢–ï–°–¢–û–í–´–ï –¢–û–ö–ï–ù–´
            test_amount = 1000 * (10 ** 6)  # 1000 —Ç–æ–∫–µ–Ω–æ–≤ —Å 6 decimals
            print(f"[STEP 4] –ú–∏–Ω—Ç–∏–Ω–≥ {test_amount / (10**6)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤...")
            
            mint_resp = await token.mint_to(
                dest=token_account,
                mint_authority=self.payer_keypair,
                amount=test_amount
            )
            
            print(f"[MINT_TO] Mint to signature: {mint_resp}")
            
            print(f"‚úÖ [SUCCESS] SPL —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º!")
            
            token_info = {
                "success": True,
                "mint_address": str(mint_pubkey),
                "token_account": str(token_account),
                "owner": str(self.payer_keypair.pubkey()),
                "amount": test_amount,
                "decimals": 6,
                "ui_amount": test_amount / (10 ** 6),
                "create_mint_signature": str(create_mint_resp),
                "mint_to_signature": str(mint_resp)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
            import json
            with open("simple_spl_token_info.json", "w", encoding="utf-8") as f:
                json.dump(token_info, f, indent=2, ensure_ascii=False)
            
            print(f"[SAVE] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ simple_spl_token_info.json")
            
            await client.close()
            return token_info
            
        except Exception as e:
            print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SPL —Ç–æ–∫–µ–Ω–∞: {e}")
            return {"success": False, "error": str(e)}

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ === –£–ü–†–û–©–ï–ù–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û SPL –¢–û–ö–ï–ù–ê ===")
    
    creator = SimpleSPLTokenCreator()
    result = await creator.create_simple_token()
    
    if result["success"]:
        print(f"\nüéâ === –¢–û–ö–ï–ù –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û ===")
        print(f"Mint Address: {result['mint_address']}")
        print(f"Token Account: {result['token_account']}")
        print(f"Amount: {result['ui_amount']} —Ç–æ–∫–µ–Ω–æ–≤")
        print(f"Create Mint Signature: {result['create_mint_signature']}")
        print(f"Mint To Signature: {result['mint_to_signature']}")
        print(f"\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å TokenExploit –Ω–∞ —ç—Ç–æ–º SPL —Ç–æ–∫–µ–Ω–µ!")
    else:
        print(f"\n‚ùå === –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –¢–û–ö–ï–ù–ê ===")
        print(f"Error: {result['error']}")

if __name__ == "__main__":
    asyncio.run(main())
