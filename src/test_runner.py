"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ Solana.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ: –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç RPC-–∫–ª–∏–µ–Ω—Ç.
2. –°–æ–∑–¥–∞–µ—Ç —É—è–∑–≤–∏–º—ã–µ –∞–∫—Ç–∏–≤—ã —Å –ø–æ–º–æ—â—å—é VulnerableAssetFactory.
3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç ExploitManager —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤.
4. –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —ç–∫—Å–ø–ª–æ–π—Ç—ã –ø—Ä–æ—Ç–∏–≤ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤.
5. –°–æ–±–∏—Ä–∞–µ—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –≤ –æ—Ç—á–µ—Ç.
"""

import asyncio
import logging
from datetime import datetime
import json


from solders.keypair import Keypair
from solders.pubkey import Pubkey

from dotenv import load_dotenv
import os

def load_env_variables():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞."""
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .env –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ src
    dotenv_path = os.path.join(os.path.dirname(__file__), '..', '.env')
    if not os.path.exists(dotenv_path):
        raise FileNotFoundError(f"–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {dotenv_path}")
    load_dotenv(dotenv_path=dotenv_path)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return {
        'solana_privkey': os.getenv('SOLANA_PRIVKEY'),
        'solana_rpc_url': os.getenv('SOLANA_RPC_URL'),
        'solana_target_address': os.getenv('SOLANA_TARGET_ADDRESS')
    }

def get_rpc_endpoints():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ RPC —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤."""
    # –í —ç—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º—ã –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π RPC –∏–∑ .env
    # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    rpc_url = os.getenv('SOLANA_RPC_URL')
    if not rpc_url:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è SOLANA_RPC_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env")
    return [rpc_url]

from .vulnerability_creation.asset_factory import VulnerableAssetFactory
from src.exploits.exploit_manager import ExploitManager
from src.exploits.base_exploit import ExploitStatus

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è Solana —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤...")

    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
        logging.info("üîß 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        env_vars = load_env_variables()
        rpc_endpoints = get_rpc_endpoints()
        attacker_keypair = Keypair.from_bytes(bytes.fromhex(env_vars['solana_privkey']))
        
        logging.info(f"–ê—Ç–∞–∫—É—é—â–∏–π –∫–æ—à–µ–ª–µ–∫: {attacker_keypair.pubkey()}")

        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —É—è–∑–≤–∏–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
        logging.info("üè≠ 2. –°–æ–∑–¥–∞–Ω–∏–µ —É—è–∑–≤–∏–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ —Å –ø–æ–º–æ—â—å—é AssetFactory...")
        asset_factory = VulnerableAssetFactory(rpc_endpoints, attacker_keypair)
        
        vulnerable_assets = await asset_factory.create_all_vulnerable_assets()
        
        if not vulnerable_assets:
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É—è–∑–≤–∏–º—ã–µ –∞–∫—Ç–∏–≤—ã. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
            return

        asset_count = sum(len(v) for v in vulnerable_assets.values())
        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {asset_count} —É—è–∑–≤–∏–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤.")
        for asset_type, assets_list in vulnerable_assets.items():
            logging.info(f"\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {asset_type} ({len(assets_list)} —à—Ç.)")
            for asset in assets_list:
                logging.info(f"  - –¢–∏–ø: {asset.vulnerability_type}, –ê–¥—Ä–µ—Å: {asset.address}")

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ExploitManager
        logging.info("ü§ñ 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ExploitManager...")
        exploit_manager = ExploitManager(rpc_endpoints, attacker_keypair)

        # 4. –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
        logging.info("üéØ 4. –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞—Ç–∞–∫ –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã...")
        target_pubkeys = [asset.address for asset_list in vulnerable_assets.values() for asset in asset_list]
        
        # –ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ —ç–∫—Å–ø–ª–æ–π—Ç–∞–º
        campaign_results = await exploit_manager.run_exploit_campaign(target_pubkeys)

        # 5. –ê–Ω–∞–ª–∏–∑ –∏ –æ—Ç—á–µ—Ç
        logging.info("üìä 5. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
        total_exploits = len(campaign_results)
        successful_exploits = [
        res for results_list in campaign_results.values() 
        for res in results_list if res.status == ExploitStatus.SUCCESS
    ]
        
        logging.info("--- –û–¢–ß–ï–¢ –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ ---")
        logging.info(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logging.info(f"–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤: {total_exploits}")
        logging.info(f"–£—Å–ø–µ—à–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤: {len(successful_exploits)}")
        logging.info(f"–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤: {total_exploits - len(successful_exploits)}")
        
        total_extracted_value = sum(res.extracted_value for res in successful_exploits if res.extracted_value)
        logging.info(f"–°—É–º–º–∞—Ä–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {total_extracted_value:.8f} SOL")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
        report_filename = f"exploit_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        report_data = [
            {
                "exploit": res.exploit_type.value,
                "target": str(res.target_account),
                "status": res.status.value,
                "error": res.error_message,
            }
            for results_list in campaign_results.values()
            for res in results_list
            if hasattr(res, "exploit_type") and hasattr(res, "target_account") and hasattr(res, "status")
        ]
        
        with open(report_filename, 'w') as f:
            json.dump(report_data, f, indent=4)
            
        logging.info(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_filename}")

    except Exception as e:
        logging.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏: {e}", exc_info=True)

if __name__ == "__main__":
    asyncio.run(main())
