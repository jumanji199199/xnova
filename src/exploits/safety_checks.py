"""
üö® –ú–û–î–£–õ–¨ –ü–†–û–í–ï–†–û–ö –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –î–õ–Ø SOLANA –≠–ö–°–ü–õ–û–ô–¢–û–í
=======================================================

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è:
- –°–ª—É—á–∞–π–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤ –° –Ω–∞—à–µ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
- –ü–æ—Ç–µ—Ä–∏ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
- –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
"""

from typing import Dict, Any, Optional, List
from solders.pubkey import Pubkey as PublicKey
from solders.transaction import Transaction
from solders.instruction import Instruction
import logging
import os

class ExploitSafetyChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤"""
    
    def __init__(self, our_target_address: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –Ω–∞—à–∏–º —Ü–µ–ª–µ–≤—ã–º –∞–¥—Ä–µ—Å–æ–º (–∫—É–¥–∞ –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç—É–ø–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞)
        
        Args:
            our_target_address: –ù–∞—à —Ü–µ–ª–µ–≤–æ–π –∞–¥—Ä–µ—Å –∏–∑ SOLANA_TARGET_ADDRESS
        """
        self.our_target_pubkey = PublicKey.from_string(our_target_address)
        self.logger = logging.getLogger(__name__)
        
    def validate_transfer_direction(self, from_pubkey: PublicKey, to_pubkey: PublicKey, 
                                  exploit_name: str, amount: int = 0) -> bool:
        """
        üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
        
        Args:
            from_pubkey: –û—Ç–∫—É–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º
            to_pubkey: –ö—É–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º  
            exploit_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–ø–ª–æ–π—Ç–∞
            amount: –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –±–µ–∑–æ–ø–∞—Å–µ–Ω, False –µ—Å–ª–∏ –æ–ø–∞—Å–µ–Ω
        """
        
        # ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –° –Ω–∞—à–µ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        if from_pubkey == self.our_target_pubkey:
            self.logger.error(f"üö® –û–ü–ê–°–ù–û–°–¢–¨! {exploit_name}: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {amount} lamports –° –Ω–∞—à–µ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!")
            self.logger.error(f"üö® –ù–ê–® –ê–î–†–ï–°: {self.our_target_pubkey}")
            self.logger.error(f"üö® –≠–¢–û –ú–û–ñ–ï–¢ –ü–†–ò–í–ï–°–¢–ò –ö –ü–û–¢–ï–†–ï –°–†–ï–î–°–¢–í!")
            return False
            
        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ù–ê –Ω–∞—à —Ü–µ–ª–µ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç
        if to_pubkey == self.our_target_pubkey:
            self.logger.info(f"‚úÖ {exploit_name}: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ {amount} lamports –í –Ω–∞—à –∞–∫–∫–∞—É–Ω—Ç")
            return True
            
        # ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        if from_pubkey != self.our_target_pubkey and to_pubkey != self.our_target_pubkey:
            self.logger.warning(f"‚ö†Ô∏è {exploit_name}: –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
            self.logger.warning(f"‚ö†Ô∏è –û—Ç: {from_pubkey}")  
            self.logger.warning(f"‚ö†Ô∏è –ö: {to_pubkey}")
            self.logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ —á–∞—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ —ç–∫—Å–ø–ª–æ–π—Ç–∞!")
            return True  # –†–∞–∑—Ä–µ—à–∞–µ–º, –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            
        return True
    
    def analyze_transaction_safety(self, transaction: Transaction, exploit_name: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤—Å–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        
        Args:
            transaction: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            exploit_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–ø–ª–æ–π—Ç–∞
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        """
        
        safety_report = {
            "safe": True,
            "warnings": [],
            "errors": [],
            "instruction_count": len(transaction.instructions),
            "exploit_name": exploit_name
        }
        
        for i, instruction in enumerate(transaction.instructions):
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            self.logger.debug(f"–ê–Ω–∞–ª–∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ {i+1}/{len(transaction.instructions)}")
            
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (transfer, token transfer, etc.)
            
        return safety_report
    
    def check_minimum_balance(self, current_balance: int, required_amount: int, 
                            exploit_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç–∫—Å–ø–ª–æ–π—Ç–∞
        
        Args:
            current_balance: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ lamports
            required_amount: –¢—Ä–µ–±—É–µ–º–∞—è —Å—É–º–º–∞ –≤ lamports
            exploit_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–ø–ª–æ–π—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω
        """
        
        if current_balance < required_amount:
            self.logger.error(f"‚ùå {exploit_name}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            self.logger.error(f"‚ùå –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance / 1e9:.6f} SOL")
            self.logger.error(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è: {required_amount / 1e9:.6f} SOL")
            return False
            
        self.logger.info(f"‚úÖ {exploit_name}: –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω ({current_balance / 1e9:.6f} SOL)")
        return True
    
    def validate_target_account(self, target_pubkey: PublicKey, exploit_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —ç–∫—Å–ø–ª–æ–π—Ç–∞
        
        Args:
            target_pubkey: –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Ü–µ–ª–µ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            exploit_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–ø–ª–æ–π—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤–∞–ª–∏–¥–µ–Ω
        """
        
        # ‚ùå –ü–æ–ø—ã—Ç–∫–∞ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        if target_pubkey == self.our_target_pubkey:
            self.logger.error(f"üö® {exploit_name}: –ü–æ–ø—ã—Ç–∫–∞ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –ù–ê–® –°–û–ë–°–¢–í–ï–ù–ù–´–ô –∞–∫–∫–∞—É–Ω—Ç!")
            self.logger.error(f"üö® –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ —Å—Ä–µ–¥—Å—Ç–≤!")
            return False
            
        # ‚úÖ –¶–µ–ª–µ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –Ω–∞—à–µ–≥–æ
        self.logger.info(f"‚úÖ {exploit_name}: –¶–µ–ª–µ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤–∞–ª–∏–¥–µ–Ω")
        return True

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
def quick_safety_check(from_addr: str, to_addr: str, exploit_name: str) -> bool:
    """
    –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
    
    Args:
        from_addr: –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        to_addr: –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è  
        exploit_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–ø–ª–æ–π—Ç–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –±–µ–∑–æ–ø–∞—Å–µ–Ω
    """
    
    our_target = os.getenv("SOLANA_TARGET_ADDRESS", "")
    if not our_target:
        logging.error("üö® SOLANA_TARGET_ADDRESS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return False
        
    checker = ExploitSafetyChecker(our_target)
    return checker.validate_transfer_direction(
        PublicKey.from_string(from_addr),
        PublicKey.from_string(to_addr), 
        exploit_name
    )

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤
def safety_check(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤"""
    def wrapper(*args, **kwargs):
        logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è {func.__name__}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        result = func(*args, **kwargs)
        
        logging.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è {func.__name__} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return result
    
    return wrapper
