"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Solana Token Deployer & Manager
"""

import asyncio
import sys
from pathlib import Path
from typing import Optional

import typer
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.prompt import Prompt, Confirm

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

from src.core.token_creator import TokenCreator, TokenMetadata
from src.dex.raydium_integration import RaydiumIntegration
from src.marketing.social_media import SocialMediaManager, TokenPromotion
from src.utils.config import get_config
from src.utils.logger import setup_logging, get_logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = typer.Typer(help="Solana Token Deployer & Manager")
console = Console()
logger = setup_logging()

class SolanaTokenManager:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏ Solana"""
    
    def __init__(self):
        self.logger = get_logger(__name__)
        self.config = get_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.token_creator = None
        self.raydium = None
        self.social_media = None
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        try:
            console.print("[yellow]–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...[/yellow]")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—è —Ç–æ–∫–µ–Ω–æ–≤
            self.token_creator = TokenCreator()
            console.print("‚úÖ TokenCreator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Raydium
            self.raydium = RaydiumIntegration(self.token_creator.payer)
            console.print("‚úÖ Raydium –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
            self.social_media = SocialMediaManager()
            console.print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            console.print("[green]–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ![/green]")
            
        except Exception as e:
            console.print(f"[red]–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}[/red]")
            raise
    
    async def create_and_promote_token(
        self,
        name: str,
        symbol: str,
        description: str,
        supply: int,
        website: Optional[str] = None,
        image_url: Optional[str] = None
    ):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ–≥–æ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç"""
        try:
            console.print(Panel(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ {symbol}", style="bold blue"))
            
            # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
            console.print("[yellow]–®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...[/yellow]")
            
            metadata = TokenMetadata(
                name=name,
                symbol=symbol,
                description=description,
                image_url=image_url or "https://via.placeholder.com/200x200",
                website=website
            )
            
            token_info = await self.token_creator.create_token(
                metadata=metadata,
                initial_supply=supply
            )
            
            if not token_info:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω")
            
            console.print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω: {token_info.mint_address}")
            
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            console.print("[yellow]–®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏...[/yellow]")
            
            # SOL –∫–∞–∫ –∫–æ—Ç–∏—Ä—É–µ–º—ã–π —Ç–æ–∫–µ–Ω
            sol_mint = "So11111111111111111111111111111111111111112"
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            sol_amount = int(self.config.liquidity.initial_sol_amount * 10**9)  # SOL –≤ lamports
            token_amount = int(supply * 0.1 * 10**metadata.decimals)  # 10% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            
            pool_id = await self.raydium.create_pool(
                base_mint=token_info.mint_address,
                quote_mint=sol_mint,
                base_amount=token_amount,
                quote_amount=sol_amount
            )
            
            if pool_id:
                console.print(f"‚úÖ –ü—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω: {pool_id}")
            else:
                console.print("[yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–∑–∂–µ)[/yellow]")
            
            # 3. –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö
            console.print("[yellow]–®–∞–≥ 3: –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö...[/yellow]")
            
            promotion = TokenPromotion(
                token_name=name,
                token_symbol=symbol,
                token_address=token_info.mint_address,
                website=website,
                description=description,
                key_features=[
                    "–ë—ã—Å—Ç—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ Solana",
                    "–ù–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏",
                    "–î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                    "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç–æ–∫–µ–Ω–æ–º–∏–∫–∞"
                ]
            )
            
            promotion_results = await self.social_media.promote_token(promotion)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
            for platform, success in promotion_results.items():
                status = "‚úÖ" if success else "‚ùå"
                console.print(f"{status} {platform.capitalize()}: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
            
            # 4. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            console.print("[yellow]–®–∞–≥ 4: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤...[/yellow]")
            
            await self.social_media.schedule_regular_posts(promotion, days=7)
            console.print("‚úÖ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 7 –¥–Ω–µ–π")
            
            # 5. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            self._display_token_summary(token_info, metadata, pool_id, promotion_results)
            
        except Exception as e:
            console.print(f"[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}[/red]")
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
    
    def _display_token_summary(self, token_info, metadata, pool_id, promotion_results):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ"""
        table = Table(title="üìä –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ", style="bold")
        
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        
        table.add_row("–ù–∞–∑–≤–∞–Ω–∏–µ", metadata.name)
        table.add_row("–°–∏–º–≤–æ–ª", metadata.symbol)
        table.add_row("–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", token_info.mint_address)
        table.add_row("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", f"{token_info.total_supply:,}")
        table.add_row("–î–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏", str(token_info.decimals))
        table.add_row("–ü—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏", pool_id or "–ù–µ —Å–æ–∑–¥–∞–Ω")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
        promotion_status = []
        for platform, success in promotion_results.items():
            status = "‚úÖ" if success else "‚ùå"
            promotion_status.append(f"{status} {platform.capitalize()}")
        
        table.add_row("–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ", "\n".join(promotion_status))
        
        console.print(table)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.print(Panel(
            f"üéâ –¢–æ–∫–µ–Ω {metadata.symbol} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω!\n\n"
            f"üìç –ê–¥—Ä–µ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—à–µ–ª–µ–∫: {token_info.mint_address}\n"
            f"üåê –°–∞–π—Ç: {metadata.website or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üì± –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö!",
            title="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
            style="bold green"
        ))
    
    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.token_creator:
            await self.token_creator.close()
        if self.raydium:
            await self.raydium.close()
        if self.social_media:
            await self.social_media.close()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
manager = SolanaTokenManager()

@app.command()
def create_token(
    name: str = typer.Option(..., help="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"),
    symbol: str = typer.Option(..., help="–°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, MYTOKEN)"),
    description: str = typer.Option(..., help="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"),
    supply: int = typer.Option(1000000000, help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤"),
    website: Optional[str] = typer.Option(None, help="–í–µ–±-—Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞"),
    image_url: Optional[str] = typer.Option(None, help="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"),
    auto_promote: bool = typer.Option(True, help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å —Ç–æ–∫–µ–Ω")
):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π SPL —Ç–æ–∫–µ–Ω"""
    
    async def _create():
        try:
            await manager.initialize()
            
            if auto_promote:
                await manager.create_and_promote_token(
                    name=name,
                    symbol=symbol,
                    description=description,
                    supply=supply,
                    website=website,
                    image_url=image_url
                )
            else:
                # –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
                metadata = TokenMetadata(
                    name=name,
                    symbol=symbol,
                    description=description,
                    image_url=image_url or "https://via.placeholder.com/200x200",
                    website=website
                )
                
                token_info = await manager.token_creator.create_token(
                    metadata=metadata,
                    initial_supply=supply
                )
                
                if token_info:
                    console.print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω: {token_info.mint_address}")
                else:
                    console.print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞")
            
        except Exception as e:
            console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
        finally:
            await manager.close()
    
    asyncio.run(_create())

@app.command()
def interactive():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
    
    console.print(Panel("üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Solana Token Deployer!", style="bold blue"))
    
    # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
    name = Prompt.ask("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
    symbol = Prompt.ask("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, MYTOKEN)").upper()
    description = Prompt.ask("üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
    
    supply_input = Prompt.ask("üí∞ –í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤", default="1000000000")
    try:
        supply = int(supply_input)
    except ValueError:
        supply = 1000000000
    
    website = Prompt.ask("üåê –í–≤–µ–¥–∏—Ç–µ –≤–µ–±-—Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", default="")
    website = website if website else None
    
    image_url = Prompt.ask("üñºÔ∏è –í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", default="")
    image_url = image_url if image_url else None
    
    auto_promote = Confirm.ask("üì¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å —Ç–æ–∫–µ–Ω –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö?", default=True)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    console.print("\nüìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:")
    console.print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}")
    console.print(f"–°–∏–º–≤–æ–ª: {symbol}")
    console.print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}")
    console.print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {supply:,}")
    console.print(f"–°–∞–π—Ç: {website or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
    console.print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url or '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'}")
    console.print(f"–ê–≤—Ç–æ–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ: {'–î–∞' if auto_promote else '–ù–µ—Ç'}")
    
    if not Confirm.ask("\n‚úÖ –°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏?"):
        console.print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    async def _create():
        try:
            await manager.initialize()
            
            if auto_promote:
                await manager.create_and_promote_token(
                    name=name,
                    symbol=symbol,
                    description=description,
                    supply=supply,
                    website=website,
                    image_url=image_url
                )
            else:
                metadata = TokenMetadata(
                    name=name,
                    symbol=symbol,
                    description=description,
                    image_url=image_url or "https://via.placeholder.com/200x200",
                    website=website
                )
                
                token_info = await manager.token_creator.create_token(
                    metadata=metadata,
                    initial_supply=supply
                )
                
                if token_info:
                    console.print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω: {token_info.mint_address}")
                else:
                    console.print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞")
            
        except Exception as e:
            console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
        finally:
            await manager.close()
    
    asyncio.run(_create())

@app.command()
def config():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    config_data = get_config()
    
    table = Table(title="‚öôÔ∏è –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", style="bold")
    table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
    
    table.add_row("–°–µ—Ç—å Solana", config_data.solana.network)
    table.add_row("RPC URL", config_data.solana.rpc_url)
    table.add_row("–î–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", str(config_data.token.default_decimals))
    table.add_row("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", f"{config_data.token.default_supply:,}")
    table.add_row("–ù–∞—á–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (SOL)", str(config_data.liquidity.initial_sol_amount))
    
    console.print(table)

if __name__ == "__main__":
    try:
        app()
    except KeyboardInterrupt:
        console.print("\n[yellow]–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    except Exception as e:
        console.print(f"[red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        try:
            asyncio.run(manager.close())
        except:
            pass
