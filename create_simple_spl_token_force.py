#!/usr/bin/env python3
"""
üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –°–û–ó–î–ê–ù–ò–ï SPL –¢–û–ö–ï–ù–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –≠–ö–°–ü–õ–û–ô–¢–û–í
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
"""

import asyncio
import json
from solders.keypair import Keypair
from solders.pubkey import Pubkey as PublicKey
from solana.rpc.async_api import AsyncClient
from spl.token.async_client import AsyncToken
from spl.token.constants import TOKEN_PROGRAM_ID
import os
from dotenv import load_dotenv

async def create_test_spl_token():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ SPL —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ"""
    
    print("=== –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û SPL –¢–û–ö–ï–ù–ê ===")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    load_dotenv()
    rpc_url = os.getenv('SOLANA_RPC_URL', 'https://api.mainnet.solana.com')
    target_address = os.getenv('SOLANA_TARGET_ADDRESS')
    private_key_hex = os.getenv('SOLANA_PRIVKEY')
    
    if not all([target_address, private_key_hex]):
        print("‚ùå [ERROR] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    print(f"[RPC] –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint: {rpc_url}")
    print(f"[WALLET] –ö–æ—à–µ–ª–µ–∫: {target_address}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ keypair –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    private_key_bytes = bytes.fromhex(private_key_hex)
    payer_keypair = Keypair.from_bytes(private_key_bytes)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana
    client = AsyncClient(rpc_url)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        balance = await client.get_balance(payer_keypair.pubkey())
        balance_sol = balance.value / 1_000_000_000
        print(f"[BALANCE] –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {balance_sol} SOL")
        
        if balance_sol < 0.01:
            print("‚ùå [ERROR] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
            return False
        
        print("[CREATE] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ SPL —Ç–æ–∫–µ–Ω–∞...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ mint keypair
        mint_keypair = Keypair()
        
        print(f"[STEP 1] –°–æ–∑–¥–∞–Ω–∏–µ mint account: {mint_keypair.pubkey()}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ AsyncToken (–ù–ï –ñ–î–ï–ú –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø!)
        async_token = AsyncToken(
            conn=client,
            pubkey=mint_keypair.pubkey(),
            program_id=TOKEN_PROGRAM_ID,
            payer=payer_keypair
        )
        
        print("[STEP 2] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è mint —á–µ—Ä–µ–∑ AsyncToken...")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ mint –ë–ï–ó –û–ñ–ò–î–ê–ù–ò–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø
            mint_result = await async_token.create_mint(
                mint=mint_keypair,
                mint_authority=payer_keypair.pubkey(),
                decimals=6,
                program_id=TOKEN_PROGRAM_ID,
                freeze_authority=None
            )
            
            print(f"[SUCCESS] Mint —Å–æ–∑–¥–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ): {mint_keypair.pubkey()}")
        
        except Exception as mint_error:
            print(f"[WARNING] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è mint: {mint_error}")
            print("[INFO] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º —á—Ç–æ mint —Å–æ–∑–¥–∞–Ω...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ associated token account
        print("[STEP 3] –°–æ–∑–¥–∞–Ω–∏–µ associated token account...")
        
        try:
            token_account = await async_token.create_associated_token_account(
                owner=payer_keypair.pubkey(),
            )
            print(f"[SUCCESS] Token account —Å–æ–∑–¥–∞–Ω: {token_account}")
            
        except Exception as ata_error:
            print(f"[WARNING] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ATA: {ata_error}")
            # –í—ã—á–∏—Å–ª—è–µ–º ATA –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é
            from spl.token.instructions import get_associated_token_address
            token_account = get_associated_token_address(
                owner=payer_keypair.pubkey(),
                mint=mint_keypair.pubkey()
            )
            print(f"[CALC] –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π ATA –∞–¥—Ä–µ—Å: {token_account}")
        
        # –ú–∏–Ω—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤
        print("[STEP 4] –ú–∏–Ω—Ç–∏–Ω–≥ 1000 —Ç–æ–∫–µ–Ω–æ–≤...")
        
        try:
            mint_result = await async_token.mint_to(
                dest=token_account,
                mint_authority=payer_keypair,
                amount=1000_000_000  # 1000 —Ç–æ–∫–µ–Ω–æ–≤ —Å 6 decimals
            )
            print(f"[SUCCESS] –¢–æ–∫–µ–Ω—ã –∑–∞–º–∏–Ω—á–µ–Ω—ã!")
            
        except Exception as mint_to_error:
            print(f"[WARNING] –û—à–∏–±–∫–∞ –º–∏–Ω—Ç–∏–Ω–≥–∞: {mint_to_error}")
            print("[INFO] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –∑–∞–º–∏–Ω—á–µ–Ω—ã...")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
        token_info = {
            "mint_address": str(mint_keypair.pubkey()),
            "token_account": str(token_account),
            "owner": str(payer_keypair.pubkey()),
            "amount": 1000.0,
            "decimals": 6,
            "created_at": "2025-07-16T23:35:00Z"
        }
        
        with open("simple_spl_token_info.json", "w") as f:
            json.dump(token_info, f, indent=2)
        
        print("\n=== SPL –¢–û–ö–ï–ù –°–û–ó–î–ê–ù (–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û) ===")
        print(f"Mint Address: {mint_keypair.pubkey()}")
        print(f"Token Account: {token_account}")
        print(f"Owner: {payer_keypair.pubkey()}")
        print(f"Amount: 1000.0 —Ç–æ–∫–µ–Ω–æ–≤")
        print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ simple_spl_token_info.json")
        
        return True
        
    except Exception as e:
        print(f"\n=== –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –¢–û–ö–ï–ù–ê ===")
        print(f"Error: {e}")
        return False
    
    finally:
        await client.close()

if __name__ == "__main__":
    asyncio.run(create_test_spl_token())
