#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
–ó–∞–ø—É—Å–∫–∞–µ—Ç —ç–∫—Å–ø–ª–æ–π—Ç—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –Ω–∞—à–∏—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
"""

import sys
import os
import asyncio
import json
from datetime import datetime
from typing import List, Dict, Any
from dotenv import load_dotenv
from solders.keypair import Keypair
from solders.pubkey import Pubkey

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
if sys.platform == "win32":
    import codecs
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(__file__))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
try:
    from src.exploits.account_exploit import AccountExploit
    from src.exploits.token_exploit import TokenExploit  
    from src.exploits.program_exploit import ProgramExploit
    from src.exploits.reentrancy_exploit import ReentrancyExploit
except ImportError:
    # Fallback –∏–º–ø–æ—Ä—Ç—ã –µ—Å–ª–∏ –º–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    import importlib.util
    import inspect
    
    def load_exploit_module(module_name, file_path):
        spec = importlib.util.spec_from_file_location(module_name, file_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        return module
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
    base_path = os.path.join(os.path.dirname(__file__), 'src', 'exploits')
    account_module = load_exploit_module('account_exploit', os.path.join(base_path, 'account_exploit.py'))
    token_module = load_exploit_module('token_exploit', os.path.join(base_path, 'token_exploit.py'))
    
    AccountExploit = account_module.AccountExploit
    TokenExploit = token_module.TokenExploit

class CreatedAccountTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    def __init__(self):
        load_dotenv()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.setup_config()
        
        # –ù–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        self.test_accounts = [
            "EUU3QLhwi5zqDGEWPiGjXtr63oD7BL8zHStTNJ2cstaL",  # excess_lamports
            "BzBgmykB3D35SttCsra93AnVPdCHFgtw2J5o7rKGL8UM"   # normal_account
        ]
        
        print(f"[INIT] –¢–µ—Å—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"[WALLET] –ö–æ—à–µ–ª–µ–∫: {self.attacker_keypair.pubkey()}")
        print(f"[TARGETS] –¢–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.test_accounts)}")
        
    def setup_config(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.target_address = os.getenv("SOLANA_TARGET_ADDRESS")
        if not self.target_address:
            raise ValueError("[ERROR] SOLANA_TARGET_ADDRESS –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        # üîó –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π RPC URL —Å API –∫–ª—é—á–æ–º!
        self.rpc_url = os.getenv("SOLANA_RPC_URL", "https://api.mainnet.solana.com")
        print(f"[RPC] –ò—Å–ø–æ–ª—å–∑—É–µ–º RPC endpoint: {self.rpc_url}")
            
        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
        privkey_hex = os.getenv("SOLANA_PRIVKEY")
        if not privkey_hex:
            raise ValueError("[ERROR] SOLANA_PRIVKEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        try:
            privkey_bytes = bytes.fromhex(privkey_hex)
            self.attacker_keypair = Keypair.from_bytes(privkey_bytes)
        except Exception as e:
            raise ValueError(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: {e}")
    
    async def test_account_exploit(self, target_address: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Account exploit –Ω–∞ —Ü–µ–ª–µ–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ"""
        print(f"\n[TEST] Testing AccountExploit –Ω–∞ {target_address}")
        
        try:
            # üîó –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–¥–µ–∂–Ω—ã–π RPC URL —Å API –∫–ª—é—á–æ–º!
            exploit = AccountExploit(self.attacker_keypair, rpc_url=self.rpc_url)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Base58 –∞–¥—Ä–µ—Å –≤ Pubkey –æ–±—ä–µ–∫—Ç
            try:
                target_pubkey = Pubkey.from_string(target_address)
                print(f"[PARSE] –ê–¥—Ä–µ—Å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {target_pubkey}")
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–∞ {target_address}: {e}")
                return {
                    "exploit": "AccountExploit",
                    "target": target_address,
                    "success": False,
                    "error": f"Invalid address format: {e}"
                }
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ü–µ–ª—å
            scan_result = await exploit.scan_target(target_pubkey)
            print(f"[SCAN] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {scan_result}")
            
            if scan_result:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —ç–∫—Å–ø–ª–æ–π—Ç
                prep_result = await exploit.prepare_exploit(target_address)
                print(f"[PREP] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: {prep_result}")
                
                if prep_result:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–ª–æ–π—Ç
                    exec_result = await exploit.execute_exploit(target_address)
                    print(f"[EXEC] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {exec_result}")
                    return {
                        "exploit": "AccountExploit",
                        "target": target_address,
                        "success": exec_result.status.value if exec_result else False,
                        "result": exec_result
                    }
            
            return {
                "exploit": "AccountExploit",
                "target": target_address,
                "success": False,
                "result": "–¶–µ–ª—å –Ω–µ —É—è–∑–≤–∏–º–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            }
            
        except Exception as e:
            print(f"[ERROR] AccountExploit –æ—à–∏–±–∫–∞: {e}")
            return {
                "exploit": "AccountExploit",
                "target": target_address,
                "success": False,
                "error": str(e)
            }
    
    async def test_token_exploit(self, target_address: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Token exploit –Ω–∞ —Ü–µ–ª–µ–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ"""
        print(f"\n[TEST] Testing TokenExploit –Ω–∞ {target_address}")
        
        try:
            # üîó –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–¥–µ–∂–Ω—ã–π RPC URL —Å API –∫–ª—é—á–æ–º!
            exploit = TokenExploit(self.attacker_keypair, rpc_url=self.rpc_url)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Base58 –∞–¥—Ä–µ—Å –≤ Pubkey –æ–±—ä–µ–∫—Ç
            try:
                target_pubkey = Pubkey.from_string(target_address)
                print(f"[PARSE] –ê–¥—Ä–µ—Å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {target_pubkey}")
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–∞ {target_address}: {e}")
                return {
                    "exploit": "TokenExploit",
                    "target": target_address,
                    "success": False,
                    "error": f"Invalid address format: {e}"
                }
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ü–µ–ª—å
            scan_result = await exploit.scan_target(target_pubkey)
            print(f"[SCAN] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {scan_result}")
            
            if scan_result:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —ç–∫—Å–ø–ª–æ–π—Ç
                prep_result = await exploit.prepare_exploit(target_address)
                print(f"[PREP] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: {prep_result}")
                
                if prep_result:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–ª–æ–π—Ç
                    exec_result = await exploit.execute_exploit(target_address)
                    print(f"[EXEC] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {exec_result}")
                    return {
                        "exploit": "TokenExploit",
                        "target": target_address,
                        "success": exec_result.status.value if exec_result else False,
                        "result": exec_result
                    }
            
            return {
                "exploit": "TokenExploit",
                "target": target_address,
                "success": False,
                "result": "–¶–µ–ª—å –Ω–µ —É—è–∑–≤–∏–º–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            }
            
        except Exception as e:
            print(f"[ERROR] TokenExploit –æ—à–∏–±–∫–∞: {e}")
            return {
                "exploit": "TokenExploit",
                "target": target_address,
                "success": False,
                "error": str(e)
            }
    
    async def test_all_exploits(self) -> List[Dict[str, Any]]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —ç–∫—Å–ø–ª–æ–π—Ç—ã –Ω–∞ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö"""
        print(f"\n[START] === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ù–´–• –ê–ö–ö–ê–£–ù–¢–û–í ===")
        print(f"[INFO] –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(self.test_accounts)}")
        
        results = []
        
        for i, account in enumerate(self.test_accounts, 1):
            print(f"\n[ACCOUNT] {i}/{len(self.test_accounts)}: {account}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º Account exploit
            account_result = await self.test_account_exploit(account)
            results.append(account_result)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º Token exploit
            token_result = await self.test_token_exploit(account)
            results.append(token_result)
            
            print(f"[PROGRESS] –ê–∫–∫–∞—É–Ω—Ç {i} –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        return results
    
    def generate_report(self, results: List[Dict[str, Any]]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        timestamp = int(datetime.now().timestamp())
        report_file = f"created_accounts_test_report_{timestamp}.json"
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "test_type": "created_accounts_testing",
            "wallet_address": str(self.attacker_keypair.pubkey()),
            "target_accounts": self.test_accounts,
            "total_tests": len(results),
            "successful_tests": len([r for r in results if r.get("success")]),
            "failed_tests": len([r for r in results if not r.get("success")]),
            "results": results
        }
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)
        
        return report_file

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        tester = CreatedAccountTester()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        results = await tester.test_all_exploits()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_file = tester.generate_report(results)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        successful = len([r for r in results if r.get("success")])
        total = len(results)
        
        print(f"\n[COMPLETE] === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===")
        print(f"[RESULTS] –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful}/{total}")
        print(f"[REPORT] –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
        for result in results:
            status = "–£–°–ü–ï–•" if result.get("success") else "–ü–†–û–í–ê–õ"
            print(f"[{status}] {result['exploit']} –Ω–∞ {result['target'][:20]}...")
        
    except Exception as e:
        print(f"[FATAL] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
