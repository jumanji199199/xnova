"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö
"""

import asyncio
import logging
from solders.keypair import Keypair

from src.token_management import (
    TokenExploitIntegrator,
    TokenExploitStrategy,
    TokenExploitConfig
)
from src.exploits import ExploitManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
TEST_TOKENS = [
    "JB2wezZLdzWfnaCfHxLg193RS3Rh51ThiXxEDWQDpump",
    "9wK8yN6iz1ie5kEJkvZCTxyN1x5sTdNfx8yeMY8Ebonk", 
    "8ZHE4ow1a2jjxuoMfyExuNamQNALv5ekZhsBn5nMDf5e",
    "DtR4D9FtVoTX2569gaL837ZgrB6wNjj6tkmnX9Rdk9B2",
    "Ey59PH7Z4BFU4HjyKnyMdWt5GGN76KazTAwQihoUXRnk",
    "8ztixkSGb1sdq4cBAA44NRAdkUZBuRz9snquq72Gpump"
]

async def test_single_token_exploit(token_mint: str, integrator: TokenExploitIntegrator):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–ª–æ–π—Ç–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    print(f"\n{'='*60}")
    print(f"–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–ö–ï–ù–ê: {token_mint}")
    print(f"{'='*60}")
    
    try:
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —ç–∫—Å–ø–ª–æ–π—Ç–∞
        config = TokenExploitConfig(
            token_mint=token_mint,
            strategy=TokenExploitStrategy.COMBINED_ATTACK,
            target_pools=[],  # –ë—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            max_slippage=0.05,
            min_profit_threshold=0.1,
            use_fake_liquidity=True,
            wash_trading_rounds=15,
            pump_multiplier=8.0
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞...")
        if not await integrator.initialize_token_exploitation(config):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é")
            return False
        
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–ª–æ–π—Ç–∞
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ç–∞–∫–∏...")
        result = await integrator.execute_integrated_exploit(config)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–ö–°–ü–õ–û–ô–¢–ê:")
        print(f"  –£—Å–ø–µ—Ö: {'‚úÖ' if result.success else '‚ùå'}")
        print(f"  –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {result.strategy.value}")
        print(f"  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.execution_time:.2f}—Å")
        print(f"  –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {result.total_profit:.6f} SOL")
        print(f"  –§–µ–π–∫–æ–≤—ã–π –æ–±—ä–µ–º: {result.fake_volume_generated:.2f}")
        print(f"  –ú–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {result.liquidity_manipulated:.2f}")
        
        if result.exploit_results:
            successful_exploits = len([r for r in result.exploit_results if r.status.name == "SUCCESS"])
            print(f"  –£—Å–ø–µ—à–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤: {successful_exploits}/{len(result.exploit_results)}")
        
        if result.manipulation_results:
            successful_manipulations = len([r for r in result.manipulation_results if r.success])
            print(f"  –£—Å–ø–µ—à–Ω—ã—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π: {successful_manipulations}/{len(result.manipulation_results)}")
        
        if result.error_message:
            print(f"  –û—à–∏–±–∫–∞: {result.error_message}")
        
        return result.success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ {token_mint}: {e}")
        return False

async def test_liquidity_manipulation(token_mint: str, integrator: TokenExploitIntegrator):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
    print(f"\nüåä –¢–ï–°–¢ –ú–ê–ù–ò–ü–£–õ–Ø–¶–ò–ò –õ–ò–ö–í–ò–î–ù–û–°–¢–ò: {token_mint[:8]}...")
    
    try:
        config = TokenExploitConfig(
            token_mint=token_mint,
            strategy=TokenExploitStrategy.LIQUIDITY_DRAIN,
            target_pools=[],
            use_fake_liquidity=True,
            pump_multiplier=10.0
        )
        
        if await integrator.initialize_token_exploitation(config):
            result = await integrator.execute_integrated_exploit(config)
            
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ' if result.success else '‚ùå'}")
            print(f"  –ü—Ä–∏–±—ã–ª—å: {result.total_profit:.6f} SOL")
            print(f"  –§–µ–π–∫–æ–≤–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {result.liquidity_manipulated:.2f}")
            
            return result.success
        else:
            print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_volume_manipulation(token_mint: str, integrator: TokenExploitIntegrator):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –æ–±—ä–µ–º–æ–º"""
    print(f"\nüìà –¢–ï–°–¢ –ú–ê–ù–ò–ü–£–õ–Ø–¶–ò–ò –û–ë–™–ï–ú–û–ú: {token_mint[:8]}...")
    
    try:
        config = TokenExploitConfig(
            token_mint=token_mint,
            strategy=TokenExploitStrategy.VOLUME_MANIPULATION,
            target_pools=[],
            wash_trading_rounds=25,
            pump_multiplier=5.0
        )
        
        if await integrator.initialize_token_exploitation(config):
            result = await integrator.execute_integrated_exploit(config)
            
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ' if result.success else '‚ùå'}")
            print(f"  –§–µ–π–∫–æ–≤—ã–π –æ–±—ä–µ–º: {result.fake_volume_generated:.2f}")
            
            return result.success
        else:
            print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_price_pump(token_mint: str, integrator: TokenExploitIntegrator):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∫–∞—á–∫–∏ —Ü–µ–Ω—ã"""
    print(f"\nüöÄ –¢–ï–°–¢ –ù–ê–ö–ê–ß–ö–ò –¶–ï–ù–´: {token_mint[:8]}...")
    
    try:
        config = TokenExploitConfig(
            token_mint=token_mint,
            strategy=TokenExploitStrategy.PRICE_PUMP,
            target_pools=[],
            pump_multiplier=15.0
        )
        
        if await integrator.initialize_token_exploitation(config):
            result = await integrator.execute_integrated_exploit(config)
            
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ' if result.success else '‚ùå'}")
            print(f"  –§–µ–π–∫–æ–≤—ã–π –æ–±—ä–µ–º: {result.fake_volume_generated:.2f}")
            
            return result.success
        else:
            print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def comprehensive_token_analysis(token_mint: str, integrator: TokenExploitIntegrator):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞"""
    print(f"\nüîç –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó: {token_mint}")
    
    results = {
        "liquidity_manipulation": False,
        "volume_manipulation": False,
        "price_pump": False,
        "combined_attack": False
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –∞—Ç–∞–∫–∏
    results["liquidity_manipulation"] = await test_liquidity_manipulation(token_mint, integrator)
    await asyncio.sleep(1)
    
    results["volume_manipulation"] = await test_volume_manipulation(token_mint, integrator)
    await asyncio.sleep(1)
    
    results["price_pump"] = await test_price_pump(token_mint, integrator)
    await asyncio.sleep(1)
    
    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞—Ç–∞–∫–∞
    results["combined_attack"] = await test_single_token_exploit(token_mint, integrator)
    
    # –°–≤–æ–¥–∫–∞
    successful_attacks = sum(results.values())
    print(f"\nüìã –°–í–û–î–ö–ê –î–õ–Ø {token_mint[:8]}:")
    print(f"  –£—Å–ø–µ—à–Ω—ã—Ö –∞—Ç–∞–∫: {successful_attacks}/4")
    print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {successful_attacks/4*100:.1f}%")
    
    for attack_type, success in results.items():
        status = "‚úÖ" if success else "‚ùå"
        print(f"  {attack_type}: {status}")
    
    return results

async def run_mass_token_testing():
    """–ú–∞—Å—Å–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤"""
    print("üéØ –ú–ê–°–°–û–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–ö–ï–ù–û–í")
    print("=" * 80)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    RPC_URL = "https://api.devnet.solana.com"  # –¢–û–õ–¨–ö–û DEVNET!
    attacker_keypair = Keypair()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä
    integrator = TokenExploitIntegrator(RPC_URL, attacker_keypair)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    all_results = {}
    successful_tokens = []
    
    try:
        for i, token_mint in enumerate(TEST_TOKENS, 1):
            print(f"\nüéØ –¢–û–ö–ï–ù {i}/{len(TEST_TOKENS)}: {token_mint}")
            
            try:
                # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞
                token_results = await comprehensive_token_analysis(token_mint, integrator)
                all_results[token_mint] = token_results
                
                # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∞—Ç–∞–∫–∞ —É—Å–ø–µ—à–Ω–∞
                if any(token_results.values()):
                    successful_tokens.append(token_mint)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–æ–∫–µ–Ω–∞–º–∏
                await asyncio.sleep(2)
                
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_mint}: {e}")
                all_results[token_mint] = {"error": str(e)}
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n{'='*80}")
        print("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print(f"{'='*80}")
        
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(TEST_TOKENS)}")
        print(f"–£—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ–º—ã—Ö: {len(successful_tokens)}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {len(successful_tokens)/len(TEST_TOKENS)*100:.1f}%")
        
        if successful_tokens:
            print(f"\n‚úÖ –£–°–ü–ï–®–ù–û –≠–ö–°–ü–õ–£–ê–¢–ò–†–£–ï–ú–´–ï –¢–û–ö–ï–ù–´:")
            for token in successful_tokens:
                print(f"  - {token}")
                
                # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —É—Å–ø–µ—à–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É
                token_results = all_results[token]
                successful_attacks = [k for k, v in token_results.items() if v and k != "error"]
                print(f"    –£—Å–ø–µ—à–Ω—ã–µ –∞—Ç–∞–∫–∏: {', '.join(successful_attacks)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞
        integrator_stats = integrator.get_statistics()
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ù–¢–ï–ì–†–ê–¢–û–†–ê:")
        print(f"  –í—Å–µ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤: {integrator_stats['total_integrated_exploits']}")
        print(f"  –£—Å–ø–µ—à–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤: {integrator_stats['successful_exploits']}")
        print(f"  –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {integrator_stats['total_profit']:.6f} SOL")
        print(f"  –û–±—â–∏–π —Ñ–µ–π–∫–æ–≤—ã–π –æ–±—ä–µ–º: {integrator_stats['total_fake_volume']:.2f}")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        await integrator.emergency_stop_all()
        print("\nüõë –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –¢–û–ö–ï–ù –≠–ö–°–ü–õ–û–ô–¢–û–í")
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!")
    print("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ devnet!")
    
    try:
        await run_mass_token_testing()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(main())
